#### code section
	.code

.function "Object init code", 1, 0
Object_init:
	return
.end

.function "Int init code", 1, 0
Int_init:
	return
.end

.function "Bool init code", 1, 0
Bool_init:
	return
.end

.function "String init code", 1, 0
String_init:
	return
.end

.function "IO init code", 1, 0
IO_init:
	return
.end

.function "A init code", 1, 0
A_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	Object_init
	return
.end

.function "Main init code", 1, 0
Main_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	Object_init
	## begin assign - line 21
	## begin new - line 21
	VR1	<-	IO_protObj
	VI0	<-	VR1
	call	Object.copy
	VR1	<-	VI0
	call	IO_init
	## store rhs in VR1 to attribute io
	store	VR1 [VR0, 12]
	return
.end

.function "B init code", 1, 0
B_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	A_init
	return
.end

.function "C init code", 1, 0
C_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	B_init
	return
.end

.function "D init code", 1, 0
D_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	C_init
	return
.end

.function "E init code", 1, 0
E_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	D_init
	return
.end

.function "F init code", 1, 0
F_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	E_init
	return
.end

.function "G init code", 1, 0
G_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	F_init
	return
.end

.function "H init code", 1, 0
H_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	G_init
	return
.end

.function "I init code", 1, 0
I_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	H_init
	return
.end

.function "J init code", 1, 0
J_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	I_init
	return
.end

.function "K init code", 1, 0
K_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	J_init
	return
.end

.function "L init code", 1, 0
L_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	K_init
	return
.end

.function "M init code", 1, 0
M_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	L_init
	return
.end

.function "N init code", 1, 0
N_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	M_init
	return
.end

.function "O init code", 1, 0
O_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	N_init
	return
.end

.function "P init code", 1, 0
P_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	O_init
	return
.end

.function "Q init code", 1, 0
Q_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	P_init
	return
.end

.function "Main.main", 1, 1
Main.main:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## begin let - line 24
	VR2	<-	int_const0.val
	load	VR2 [VR2, 0]
	VR1	<-	VR2
	## let var i in VR1
	## begin let - line 25
	## begin new - line 25
	VR3	<-	A_protObj
	VI0	<-	VR3
	call	Object.copy
	VR3	<-	VI0
	call	A_init
	VR2	<-	VR3
	## let var a in VR2
	## begin let - line 26
	## begin new - line 26
	VR4	<-	Q_protObj
	VI0	<-	VR4
	call	Object.copy
	VR4	<-	VI0
	call	Q_init
	VR3	<-	VR4
	## let var q in VR3
	## begin let - line 27
	VR4	<-	0
	## let var result in VR4
	## begin loop - line 29
loop_start0:
	## < operator - line 29
	VR5	<-	VR1
	VR6	<-	int_const1.val
	load	VR6 [VR6, 0]
	VR5	<-	VR5 < VR6
	jumpf	VR5 loop_end0
	## begin assign - line 30
	## begin typed case - line 31
	VR5	<-	VR3
	## case on void handling, ends at case0_notvoid
	jumpt	VR5 case0_notvoid
	VR5	<-	str_const0
	VR8	<-	31
	# boxing integer from VR8 to VR7
	VR7	<-	Bool_protObj
	VI0	<-	VR7
	call	Object.copy
	VR7	<-	VI0
	store	VR8 [VR7, 12]
	# end boxing
	VI0	<-	VR5
	VI1	<-	VR7
	call	_case_abort2
case0_notvoid:
	load	VR6 [VR5, 0]
case0_tag22:
	VR7	<-	VR6 = 22
	jumpf	VR7 case0_tag21
	VR6	<-	int_const18.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag21:
	VR7	<-	VR6 < 21
	jumpt	VR7 case0_tag20
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag20
	VR6	<-	int_const17.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag20:
	VR7	<-	VR6 < 20
	jumpt	VR7 case0_tag19
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag19
	VR6	<-	int_const16.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag19:
	VR7	<-	VR6 < 19
	jumpt	VR7 case0_tag18
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag18
	VR6	<-	int_const15.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag18:
	VR7	<-	VR6 < 18
	jumpt	VR7 case0_tag17
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag17
	VR6	<-	int_const14.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag17:
	VR7	<-	VR6 < 17
	jumpt	VR7 case0_tag16
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag16
	VR6	<-	int_const13.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag16:
	VR7	<-	VR6 < 16
	jumpt	VR7 case0_tag15
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag15
	VR6	<-	int_const12.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag15:
	VR7	<-	VR6 < 15
	jumpt	VR7 case0_tag14
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag14
	VR6	<-	int_const11.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag14:
	VR7	<-	VR6 < 14
	jumpt	VR7 case0_tag13
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag13
	VR6	<-	int_const10.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag13:
	VR7	<-	VR6 < 13
	jumpt	VR7 case0_tag12
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag12
	VR6	<-	int_const9.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag12:
	VR7	<-	VR6 < 12
	jumpt	VR7 case0_tag11
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag11
	VR6	<-	int_const8.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag11:
	VR7	<-	VR6 < 11
	jumpt	VR7 case0_tag10
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag10
	VR6	<-	int_const7.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag10:
	VR7	<-	VR6 < 10
	jumpt	VR7 case0_tag9
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag9
	VR6	<-	int_const6.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag9:
	VR7	<-	VR6 < 9
	jumpt	VR7 case0_tag8
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag8
	VR6	<-	int_const5.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag8:
	VR7	<-	VR6 < 8
	jumpt	VR7 case0_tag7
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag7
	VR6	<-	int_const4.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag7:
	VR7	<-	VR6 < 7
	jumpt	VR7 case0_tag5
	VR7	<-	22 < VR6
	jumpt	VR7 case0_tag5
	VR6	<-	int_const3.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_tag5:
	VR7	<-	VR6 < 5
	jumpt	VR7 case0_error
	VR7	<-	22 < VR6
	jumpt	VR7 case0_error
	VR6	<-	int_const2.val
	load	VR6 [VR6, 0]
	jump	case0_end
case0_error:
	VI0	<-	VR5
	call	_case_abort
case0_end:
	VR5	<-	VR6
	## store rhs from VR5 to let var result in VR4
	VR4	<-	VR5
	## begin assign - line 50
	## + operator - line 50
	VR5	<-	VR1
	VR6	<-	int_const2.val
	load	VR6 [VR6, 0]
	VR5	<-	VR5 + VR6
	## store rhs from VR5 to let var i in VR1
	VR1	<-	VR5
	jump	loop_start0
loop_end0:
	## begin if-then-else - line 52
	## not operator - line 52
	## = operator - line 52
	VR5	<-	VR4
	VR6	<-	int_const18.val
	load	VR6 [VR6, 0]
	VR5	<-	VR5 = VR6
	VR5	<-	1 - VR5
	jumpf	VR5 ite_false0
	## begin true branch
	## begin dispatch - line 52
	VR5	<-	VR0
	## caller in VR5
	## dispatch to void handling, ends at dispatch_notvoid0
	jumpt	VR5 dispatch_notvoid0
	VR5	<-	str_const0
	VR8	<-	52
	# boxing integer from VR8 to VR7
	VR7	<-	Bool_protObj
	VI0	<-	VR7
	call	Object.copy
	VR7	<-	VI0
	store	VR8 [VR7, 12]
	# end boxing
	VI0	<-	VR5
	VI1	<-	VR7
	call	_dispatch_abort
dispatch_notvoid0:
	## store self and actual parameters into VI's
	VI0	<-	VR5
	## compute the target address
	load	VR6 [VR5, 8]
	load	VR6 [VR6, 0]
	call	VR6
	## fetch (and maybe unbox) the result
	VR5	<-	VI0
	jump	ite_end0
	## begin false branch
ite_false0:
	VR5	<-	int_const0.val
	load	VR5 [VR5, 0]
ite_end0:
	## begin dispatch - line 54
	load	VR5 [VR0, 12]
	## caller in VR5
	## dispatch to void handling, ends at dispatch_notvoid1
	jumpt	VR5 dispatch_notvoid1
	VR5	<-	str_const0
	VR8	<-	54
	# boxing integer from VR8 to VR7
	VR7	<-	Bool_protObj
	VI0	<-	VR7
	call	Object.copy
	VR7	<-	VI0
	store	VR8 [VR7, 12]
	# end boxing
	VI0	<-	VR5
	VI1	<-	VR7
	call	_dispatch_abort
dispatch_notvoid1:
	## actual parameter 1
	VR6	<-	str_const1
	## store self and actual parameters into VI's
	VI0	<-	VR5
	VI1	<-	VR6
	## compute the target address
	load	VR6 [VR5, 8]
	load	VR6 [VR6, 12]
	call	VR6
	## fetch (and maybe unbox) the result
	VR5	<-	VI0
	## begin assign - line 56
	VR5	<-	int_const0.val
	load	VR5 [VR5, 0]
	## store rhs from VR5 to let var i in VR1
	VR1	<-	VR5
	## begin loop - line 57
loop_start1:
	## < operator - line 57
	VR5	<-	VR1
	VR6	<-	int_const1.val
	load	VR6 [VR6, 0]
	VR5	<-	VR5 < VR6
	jumpf	VR5 loop_end1
	## begin assign - line 58
	## begin typed case - line 59
	VR5	<-	VR2
	## case on void handling, ends at case1_notvoid
	jumpt	VR5 case1_notvoid
	VR5	<-	str_const0
	VR8	<-	59
	# boxing integer from VR8 to VR7
	VR7	<-	Bool_protObj
	VI0	<-	VR7
	call	Object.copy
	VR7	<-	VI0
	store	VR8 [VR7, 12]
	# end boxing
	VI0	<-	VR5
	VI1	<-	VR7
	call	_case_abort2
case1_notvoid:
	load	VR6 [VR5, 0]
case1_tag22:
	VR7	<-	VR6 = 22
	jumpf	VR7 case1_tag21
	VR6	<-	int_const18.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag21:
	VR7	<-	VR6 < 21
	jumpt	VR7 case1_tag20
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag20
	VR6	<-	int_const17.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag20:
	VR7	<-	VR6 < 20
	jumpt	VR7 case1_tag19
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag19
	VR6	<-	int_const16.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag19:
	VR7	<-	VR6 < 19
	jumpt	VR7 case1_tag18
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag18
	VR6	<-	int_const15.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag18:
	VR7	<-	VR6 < 18
	jumpt	VR7 case1_tag17
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag17
	VR6	<-	int_const14.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag17:
	VR7	<-	VR6 < 17
	jumpt	VR7 case1_tag16
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag16
	VR6	<-	int_const13.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag16:
	VR7	<-	VR6 < 16
	jumpt	VR7 case1_tag15
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag15
	VR6	<-	int_const12.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag15:
	VR7	<-	VR6 < 15
	jumpt	VR7 case1_tag14
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag14
	VR6	<-	int_const11.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag14:
	VR7	<-	VR6 < 14
	jumpt	VR7 case1_tag13
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag13
	VR6	<-	int_const10.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag13:
	VR7	<-	VR6 < 13
	jumpt	VR7 case1_tag12
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag12
	VR6	<-	int_const9.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag12:
	VR7	<-	VR6 < 12
	jumpt	VR7 case1_tag11
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag11
	VR6	<-	int_const8.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag11:
	VR7	<-	VR6 < 11
	jumpt	VR7 case1_tag10
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag10
	VR6	<-	int_const7.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag10:
	VR7	<-	VR6 < 10
	jumpt	VR7 case1_tag9
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag9
	VR6	<-	int_const6.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag9:
	VR7	<-	VR6 < 9
	jumpt	VR7 case1_tag8
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag8
	VR6	<-	int_const5.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag8:
	VR7	<-	VR6 < 8
	jumpt	VR7 case1_tag7
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag7
	VR6	<-	int_const4.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag7:
	VR7	<-	VR6 < 7
	jumpt	VR7 case1_tag5
	VR7	<-	22 < VR6
	jumpt	VR7 case1_tag5
	VR6	<-	int_const3.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_tag5:
	VR7	<-	VR6 < 5
	jumpt	VR7 case1_error
	VR7	<-	22 < VR6
	jumpt	VR7 case1_error
	VR6	<-	int_const2.val
	load	VR6 [VR6, 0]
	jump	case1_end
case1_error:
	VI0	<-	VR5
	call	_case_abort
case1_end:
	VR5	<-	VR6
	## store rhs from VR5 to let var result in VR4
	VR4	<-	VR5
	## begin assign - line 78
	## + operator - line 78
	VR5	<-	VR1
	VR6	<-	int_const2.val
	load	VR6 [VR6, 0]
	VR5	<-	VR5 + VR6
	## store rhs from VR5 to let var i in VR1
	VR1	<-	VR5
	jump	loop_start1
loop_end1:
	## begin if-then-else - line 80
	## not operator - line 80
	## = operator - line 80
	VR5	<-	VR4
	VR6	<-	int_const2.val
	load	VR6 [VR6, 0]
	VR5	<-	VR5 = VR6
	VR5	<-	1 - VR5
	jumpf	VR5 ite_false1
	## begin true branch
	## begin dispatch - line 80
	VR5	<-	VR0
	## caller in VR5
	## dispatch to void handling, ends at dispatch_notvoid2
	jumpt	VR5 dispatch_notvoid2
	VR5	<-	str_const0
	VR8	<-	80
	# boxing integer from VR8 to VR7
	VR7	<-	Bool_protObj
	VI0	<-	VR7
	call	Object.copy
	VR7	<-	VI0
	store	VR8 [VR7, 12]
	# end boxing
	VI0	<-	VR5
	VI1	<-	VR7
	call	_dispatch_abort
dispatch_notvoid2:
	## store self and actual parameters into VI's
	VI0	<-	VR5
	## compute the target address
	load	VR6 [VR5, 8]
	load	VR6 [VR6, 0]
	call	VR6
	## fetch (and maybe unbox) the result
	VR5	<-	VI0
	jump	ite_end1
	## begin false branch
ite_false1:
	VR5	<-	int_const0.val
	load	VR5 [VR5, 0]
ite_end1:
	## begin dispatch - line 82
	load	VR5 [VR0, 12]
	## caller in VR5
	## dispatch to void handling, ends at dispatch_notvoid3
	jumpt	VR5 dispatch_notvoid3
	VR5	<-	str_const0
	VR8	<-	82
	# boxing integer from VR8 to VR7
	VR7	<-	Bool_protObj
	VI0	<-	VR7
	call	Object.copy
	VR7	<-	VI0
	store	VR8 [VR7, 12]
	# end boxing
	VI0	<-	VR5
	VI1	<-	VR7
	call	_dispatch_abort
dispatch_notvoid3:
	## actual parameter 1
	VR6	<-	str_const2
	## store self and actual parameters into VI's
	VI0	<-	VR5
	VI1	<-	VR6
	## compute the target address
	load	VR6 [VR5, 8]
	load	VR6 [VR6, 12]
	call	VR6
	## fetch (and maybe unbox) the result
	VR5	<-	VI0
	## store let result over let var result
	VR4	<-	VR5
	## store let result over let var q
	VR3	<-	VR4
	## store let result over let var a
	VR2	<-	VR3
	## store let result over let var i
	VR1	<-	VR2
	## store result into the output register
	VI0	<-	VR1
	return
.end

#### data section
	.data
#### object tags
_int_tag:
	DW	1
_bool_tag:
	DW	2
_string_tag:
	DW	3
_Object_tag:
	DW	0
_IO_tag:
	DW	4
_A_tag:
	DW	5
_Main_tag:
	DW	6
_B_tag:
	DW	7
_C_tag:
	DW	8
_D_tag:
	DW	9
_E_tag:
	DW	10
_F_tag:
	DW	11
_G_tag:
	DW	12
_H_tag:
	DW	13
_I_tag:
	DW	14
_J_tag:
	DW	15
_K_tag:
	DW	16
_L_tag:
	DW	17
_M_tag:
	DW	18
_N_tag:
	DW	19
_O_tag:
	DW	20
_P_tag:
	DW	21
_Q_tag:
	DW	22
#### constants
str_const30:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const0
	DS	4
str_const29:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const5
	DB	"Main"
	DS	4
str_const28:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"Q"
	DS	3
str_const27:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"P"
	DS	3
str_const26:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"O"
	DS	3
str_const25:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"N"
	DS	3
str_const24:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"M"
	DS	3
str_const23:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"L"
	DS	3
str_const22:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"K"
	DS	3
str_const21:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"J"
	DS	3
str_const20:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"I"
	DS	3
str_const19:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"H"
	DS	3
str_const18:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"G"
	DS	3
str_const17:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"F"
	DS	3
str_const16:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"E"
	DS	3
str_const15:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"D"
	DS	3
str_const14:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"C"
	DS	3
str_const13:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"B"
	DS	3
str_const12:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"A"
	DS	3
str_const11:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const3
	DB	"IO"
	DS	2
str_const10:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const7
	DB	"String"
	DS	2
str_const9:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const5
	DB	"Bool"
	DS	4
str_const8:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const4
	DB	"Int"
	DS	1
str_const7:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const7
	DB	"Object"
	DS	2
str_const6:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const11
	DB	"_prim_slot"
	DS	2
str_const5:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const10
	DB	"SELF_TYPE"
	DS	3
str_const4:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const10
	DB	"_no_class"
	DS	3
str_const3:
	DW	3
	DW	8
	DL	String_dispatch
	DL	int_const14
	DB	"<basic class>"
	DS	3
str_const2:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const10
	DB	"A passed\n"
	DS	3
str_const1:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const10
	DB	"Q passed\n"
	DS	3
str_const0:
	DW	3
	DW	11
	DL	String_dispatch
	DL	int_const19
	DB	"_tests/simple/caseloop.cl"
	DS	3
int_const19:
	DW	1
	DW	4
	DL	Object_dispatch
int_const19.val:
	DW	25
int_const18:
	DW	1
	DW	4
	DL	Object_dispatch
int_const18.val:
	DW	17
int_const17:
	DW	1
	DW	4
	DL	Object_dispatch
int_const17.val:
	DW	16
int_const16:
	DW	1
	DW	4
	DL	Object_dispatch
int_const16.val:
	DW	15
int_const15:
	DW	1
	DW	4
	DL	Object_dispatch
int_const15.val:
	DW	14
int_const14:
	DW	1
	DW	4
	DL	Object_dispatch
int_const14.val:
	DW	13
int_const13:
	DW	1
	DW	4
	DL	Object_dispatch
int_const13.val:
	DW	12
int_const12:
	DW	1
	DW	4
	DL	Object_dispatch
int_const12.val:
	DW	11
int_const11:
	DW	1
	DW	4
	DL	Object_dispatch
int_const11.val:
	DW	10
int_const10:
	DW	1
	DW	4
	DL	Object_dispatch
int_const10.val:
	DW	9
int_const9:
	DW	1
	DW	4
	DL	Object_dispatch
int_const9.val:
	DW	8
int_const8:
	DW	1
	DW	4
	DL	Object_dispatch
int_const8.val:
	DW	7
int_const7:
	DW	1
	DW	4
	DL	Object_dispatch
int_const7.val:
	DW	6
int_const6:
	DW	1
	DW	4
	DL	Object_dispatch
int_const6.val:
	DW	5
int_const5:
	DW	1
	DW	4
	DL	Object_dispatch
int_const5.val:
	DW	4
int_const4:
	DW	1
	DW	4
	DL	Object_dispatch
int_const4.val:
	DW	3
int_const3:
	DW	1
	DW	4
	DL	Object_dispatch
int_const3.val:
	DW	2
int_const2:
	DW	1
	DW	4
	DL	Object_dispatch
int_const2.val:
	DW	1
int_const1:
	DW	1
	DW	4
	DL	Object_dispatch
int_const1.val:
	DW	1000
int_const0:
	DW	1
	DW	4
	DL	Object_dispatch
int_const0.val:
	DW	0
bool_const1:
	DW	2
	DW	4
	DL	Object_dispatch
	DW	1
#### class names by tag
class_nameTab:
	DL	str_const7
	DL	str_const8
	DL	str_const9
	DL	str_const10
	DL	str_const11
	DL	str_const12
	DL	str_const29
	DL	str_const13
	DL	str_const14
	DL	str_const15
	DL	str_const16
	DL	str_const17
	DL	str_const18
	DL	str_const19
	DL	str_const20
	DL	str_const21
	DL	str_const22
	DL	str_const23
	DL	str_const24
	DL	str_const25
	DL	str_const26
	DL	str_const27
	DL	str_const28
#### prototypes and init by tag
class_objTab:
	DL	Object_protObj
	DL	Object_init
	DL	Int_protObj
	DL	Int_init
	DL	Bool_protObj
	DL	Bool_init
	DL	String_protObj
	DL	String_init
	DL	IO_protObj
	DL	IO_init
	DL	A_protObj
	DL	A_init
	DL	Main_protObj
	DL	Main_init
	DL	B_protObj
	DL	B_init
	DL	C_protObj
	DL	C_init
	DL	D_protObj
	DL	D_init
	DL	E_protObj
	DL	E_init
	DL	F_protObj
	DL	F_init
	DL	G_protObj
	DL	G_init
	DL	H_protObj
	DL	H_init
	DL	I_protObj
	DL	I_init
	DL	J_protObj
	DL	J_init
	DL	K_protObj
	DL	K_init
	DL	L_protObj
	DL	L_init
	DL	M_protObj
	DL	M_init
	DL	N_protObj
	DL	N_init
	DL	O_protObj
	DL	O_init
	DL	P_protObj
	DL	P_init
	DL	Q_protObj
	DL	Q_init
#### dispatch tables by tag
Bool_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
IO_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	IO.out_string
	DL	IO.out_int
	DL	IO.in_string
	DL	IO.in_int
A_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
Main_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	Main.main
B_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
C_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
D_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
E_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
F_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
G_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
H_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
I_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
J_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
K_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
L_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
M_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
N_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
O_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
P_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
Q_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
#### prototype objects
Object_protObj:
	DW	0
	DW	3
	DL	Object_dispatch
Bool_protObj:
	DW	2
	DW	4
	DL	Bool_dispatch
	DW	0
IO_protObj:
	DW	4
	DW	3
	DL	IO_dispatch
A_protObj:
	DW	5
	DW	3
	DL	A_dispatch
Main_protObj:
	DW	6
	DW	4
	DL	Main_dispatch
	DW	0
B_protObj:
	DW	7
	DW	3
	DL	B_dispatch
C_protObj:
	DW	8
	DW	3
	DL	C_dispatch
D_protObj:
	DW	9
	DW	3
	DL	D_dispatch
E_protObj:
	DW	10
	DW	3
	DL	E_dispatch
F_protObj:
	DW	11
	DW	3
	DL	F_dispatch
G_protObj:
	DW	12
	DW	3
	DL	G_dispatch
H_protObj:
	DW	13
	DW	3
	DL	H_dispatch
I_protObj:
	DW	14
	DW	3
	DL	I_dispatch
J_protObj:
	DW	15
	DW	3
	DL	J_dispatch
K_protObj:
	DW	16
	DW	3
	DL	K_dispatch
L_protObj:
	DW	17
	DW	3
	DL	L_dispatch
M_protObj:
	DW	18
	DW	3
	DL	M_dispatch
N_protObj:
	DW	19
	DW	3
	DL	N_dispatch
O_protObj:
	DW	20
	DW	3
	DL	O_dispatch
P_protObj:
	DW	21
	DW	3
	DL	P_dispatch
Q_protObj:
	DW	22
	DW	3
	DL	Q_dispatch
