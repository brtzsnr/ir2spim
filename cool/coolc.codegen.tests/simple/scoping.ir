#### code section
	.code

.function "Void dispatch handler", 2, 0
void_disp_handler:
	VR1	<-	VI0
	VR3	<-	VI1
	# boxing integer from VR3 to VR2
	VR2	<-	Int_protObj
	VI0	<-	VR2
	call	Object.copy
	VR2	<-	VI0
	store	VR3 [VR2, 12]
	# end boxing
	VI0	<-	VR1
	VI1	<-	VR2
	call	_dispatch_abort
	return
.end

.function "Void case handler", 2, 0
void_case_handler:
	VR1	<-	VI0
	VR3	<-	VI1
	# boxing integer from VR3 to VR2
	VR2	<-	Int_protObj
	VI0	<-	VR2
	call	Object.copy
	VR2	<-	VI0
	store	VR3 [VR2, 12]
	# end boxing
	VI0	<-	VR1
	VI1	<-	VR2
	call	_case_abort2
	return
.end

.function "Object init code", 1, 0
Object_init:
	return
.end

.function "Int init code", 1, 0
Int_init:
	return
.end

.function "Bool init code", 1, 0
Bool_init:
	return
.end

.function "String init code", 1, 0
String_init:
	return
.end

.function "IO init code", 1, 0
IO_init:
	return
.end

.function "Bob init code", 1, 0
Bob_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	IO_init
	VR1	<-	0
	store	VR1 [VR0, 12]
	## begin assign - line 3
	VR1	<-	4
	## store rhs in VR1 to attribute y
	store	VR1 [VR0, 16]
	return
.end

.function "Main init code", 1, 0
Main_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	Bob_init
	## begin assign - line 7
	VR1	<-	23
	## store rhs in VR1 to attribute z
	store	VR1 [VR0, 20]
	return
.end

.function "Main.jack", 3, 1
Main.jack:
	## store self and arguments into the reserved VR0..VR2
	VR0	<-	VI0
	VR1	<-	VI1
	VR2	<-	VI2
	## begin let - line 10
	## + operator - line 10
	VR3	<-	VR2
	load	VR4 [VR0, 16]
	VR3	<-	VR3 + VR4
	## let var z in VR3
	## begin dispatch - line 10
	VR4	<-	VR0
	## caller in VR4
	## dispatch to void handling, ends at dispatch_notvoid0
	jumpt	VR4 dispatch_notvoid0
	VR5	<-	str_const0
	VI0	<-	VR5
	VR5	<-	10
	VI1	<-	VR5
	call	void_disp_handler
dispatch_notvoid0:
	## actual parameter 1
	VR5	<-	VR3
	## store self and actual parameters into VI's
	VI0	<-	VR4
	VI1	<-	VR5
	## compute the target address
	load	VR5 [VR4, 8]
	load	VR5 [VR5, 32]
	call	VR5
	## fetch (and maybe unbox) the result
	VR4	<-	VI0
	## store let result over let var z
	VR3	<-	VR4
	## begin assign - line 11
	## + operator - line 11
	load	VR3 [VR0, 16]
	VR4	<-	4
	VR3	<-	VR3 + VR4
	## store rhs in VR3 to attribute y
	store	VR3 [VR0, 16]
	## begin let - line 12
	## + operator - line 12
	VR3	<-	VR2
	load	VR4 [VR0, 16]
	VR3	<-	VR3 + VR4
	## let var y in VR3
	VR4	<-	VR3
	## store let result over let var y
	VR3	<-	VR4
	## store result into the output register
	VI0	<-	VR3
	return
.end

.function "Main.print_z", 2, 1
Main.print_z:
	## store self and arguments into the reserved VR0..VR1
	VR0	<-	VI0
	VR1	<-	VI1
	## begin dispatch - line 16
	VR2	<-	VR0
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid1
	jumpt	VR2 dispatch_notvoid1
	VR3	<-	str_const0
	VI0	<-	VR3
	VR3	<-	16
	VI1	<-	VR3
	call	void_disp_handler
dispatch_notvoid1:
	## actual parameter 1
	VR3	<-	str_const1
	## store self and actual parameters into VI's
	VI0	<-	VR2
	VI1	<-	VR3
	## compute the target address
	load	VR3 [VR2, 8]
	load	VR3 [VR3, 12]
	call	VR3
	## fetch (and maybe unbox) the result
	VR2	<-	VI0
	## begin dispatch - line 17
	VR2	<-	VR0
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid2
	jumpt	VR2 dispatch_notvoid2
	VR3	<-	str_const0
	VI0	<-	VR3
	VR3	<-	17
	VI1	<-	VR3
	call	void_disp_handler
dispatch_notvoid2:
	## actual parameter 1
	VR3	<-	VR1
	# boxing integer from VR3 to VR4
	VR4	<-	Int_protObj
	VI0	<-	VR4
	call	Object.copy
	VR4	<-	VI0
	store	VR3 [VR4, 12]
	# end boxing
	VR3	<-	VR4
	## store self and actual parameters into VI's
	VI0	<-	VR2
	VI1	<-	VR3
	## compute the target address
	load	VR3 [VR2, 8]
	load	VR3 [VR3, 16]
	call	VR3
	## fetch (and maybe unbox) the result
	VR2	<-	VI0
	## begin dispatch - line 18
	VR2	<-	VR0
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid3
	jumpt	VR2 dispatch_notvoid3
	VR3	<-	str_const0
	VI0	<-	VR3
	VR3	<-	18
	VI1	<-	VR3
	call	void_disp_handler
dispatch_notvoid3:
	## actual parameter 1
	VR3	<-	str_const2
	## store self and actual parameters into VI's
	VI0	<-	VR2
	VI1	<-	VR3
	## compute the target address
	load	VR3 [VR2, 8]
	load	VR3 [VR3, 12]
	call	VR3
	## fetch (and maybe unbox) the result
	VR2	<-	VI0
	## store result into the output register
	VI0	<-	VR2
	return
.end

.function "Main.main", 1, 1
Main.main:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## begin dispatch - line 22
	VR1	<-	VR0
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid4
	jumpt	VR1 dispatch_notvoid4
	VR2	<-	str_const0
	VI0	<-	VR2
	VR2	<-	22
	VI1	<-	VR2
	call	void_disp_handler
dispatch_notvoid4:
	## actual parameter 1
	load	VR2 [VR0, 20]
	## store self and actual parameters into VI's
	VI0	<-	VR1
	VI1	<-	VR2
	## compute the target address
	load	VR2 [VR1, 8]
	load	VR2 [VR2, 32]
	call	VR2
	## fetch (and maybe unbox) the result
	VR1	<-	VI0
	## begin let - line 23
	## begin dispatch - line 23
	VR1	<-	VR0
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid5
	jumpt	VR1 dispatch_notvoid5
	VR2	<-	str_const0
	VI0	<-	VR2
	VR2	<-	23
	VI1	<-	VR2
	call	void_disp_handler
dispatch_notvoid5:
	## actual parameter 1
	VR2	<-	5
	## actual parameter 2
	## + operator - line 23
	load	VR3 [VR0, 20]
	VR4	<-	2
	VR3	<-	VR3 + VR4
	## store self and actual parameters into VI's
	VI0	<-	VR1
	VI1	<-	VR2
	VI2	<-	VR3
	## compute the target address
	load	VR2 [VR1, 8]
	load	VR2 [VR2, 28]
	call	VR2
	## fetch (and maybe unbox) the result
	VR1	<-	VI0
	## let var z in VR1
	## begin dispatch - line 24
	VR2	<-	VR0
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid6
	jumpt	VR2 dispatch_notvoid6
	VR3	<-	str_const0
	VI0	<-	VR3
	VR3	<-	24
	VI1	<-	VR3
	call	void_disp_handler
dispatch_notvoid6:
	## actual parameter 1
	VR3	<-	VR1
	## store self and actual parameters into VI's
	VI0	<-	VR2
	VI1	<-	VR3
	## compute the target address
	load	VR3 [VR2, 8]
	load	VR3 [VR3, 32]
	call	VR3
	## fetch (and maybe unbox) the result
	VR2	<-	VI0
	## store let result over let var z
	VR1	<-	VR2
	## store result into the output register
	VI0	<-	VR1
	return
.end

#### data section
	.data
#### object tags
_int_tag:
	DW	1
_bool_tag:
	DW	2
_string_tag:
	DW	3
_Object_tag:
	DW	0
_IO_tag:
	DW	4
_Bob_tag:
	DW	5
_Main_tag:
	DW	6
#### constants
str_const14:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const4
	DS	4
str_const13:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const0
	DB	"Main"
	DS	4
str_const12:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const5
	DB	"Bob"
	DS	1
str_const11:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const3
	DB	"IO"
	DS	2
str_const10:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const6
	DB	"String"
	DS	2
str_const9:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const0
	DB	"Bool"
	DS	4
str_const8:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const5
	DB	"Int"
	DS	1
str_const7:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const6
	DB	"Object"
	DS	2
str_const6:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const7
	DB	"_prim_slot"
	DS	2
str_const5:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const8
	DB	"SELF_TYPE"
	DS	3
str_const4:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const8
	DB	"_no_class"
	DS	3
str_const3:
	DW	3
	DW	8
	DL	String_dispatch
	DL	int_const9
	DB	"<basic class>"
	DS	3
str_const2:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const10
	DB	"\n"
	DS	3
str_const1:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const0
	DB	"z = "
	DS	4
str_const0:
	DW	3
	DW	11
	DL	String_dispatch
	DL	int_const11
	DB	"_tests/simple/scoping.cl"
	DS	4
int_const11:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	24
int_const10:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	1
int_const9:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	13
int_const8:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	9
int_const7:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	10
int_const6:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	6
int_const5:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	3
int_const4:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	0
int_const3:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	2
int_const2:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	5
int_const1:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	23
int_const0:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	4
bool_const1:
	DW	2
	DW	4
	DL	Object_dispatch
	DW	1
#### class names by tag
class_nameTab:
	DL	str_const7
	DL	str_const8
	DL	str_const9
	DL	str_const10
	DL	str_const11
	DL	str_const12
	DL	str_const13
#### prototypes and init by tag
class_objTab:
	DL	Object_protObj
	DL	Object_init
	DL	Int_protObj
	DL	Int_init
	DL	Bool_protObj
	DL	Bool_init
	DL	String_protObj
	DL	String_init
	DL	IO_protObj
	DL	IO_init
	DL	Bob_protObj
	DL	Bob_init
	DL	Main_protObj
	DL	Main_init
#### dispatch tables by tag
Bool_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
IO_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	IO.out_string
	DL	IO.out_int
	DL	IO.in_string
	DL	IO.in_int
Bob_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	IO.out_string
	DL	IO.out_int
	DL	IO.in_string
	DL	IO.in_int
Main_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	IO.out_string
	DL	IO.out_int
	DL	IO.in_string
	DL	IO.in_int
	DL	Main.jack
	DL	Main.print_z
	DL	Main.main
#### prototype objects
Object_protObj:
	DW	0
	DW	3
	DL	Object_dispatch
Bool_protObj:
	DW	2
	DW	4
	DL	Bool_dispatch
	DW	0
IO_protObj:
	DW	4
	DW	3
	DL	IO_dispatch
Bob_protObj:
	DW	5
	DW	5
	DL	Bob_dispatch
	DW	0
	DW	0
Main_protObj:
	DW	6
	DW	6
	DL	Main_dispatch
	DW	0
	DW	0
	DW	0
