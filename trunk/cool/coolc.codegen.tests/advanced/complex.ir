#### code section
	.code

.function "Object init code", 1, 0
Object_init:
	return
.end

.function "Int init code", 1, 0
Int_init:
	return
.end

.function "Bool init code", 1, 0
Bool_init:
	return
.end

.function "String init code", 1, 0
String_init:
	return
.end

.function "IO init code", 1, 0
IO_init:
	return
.end

.function "Main init code", 1, 0
Main_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	IO_init
	return
.end

.function "Complex init code", 1, 0
Complex_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call	IO_init
	VR1	<-	0
	store	VR1 [VR0, 12]
	VR1	<-	0
	store	VR1 [VR0, 16]
	return
.end

.function "Main.main", 1, 1
Main.main:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## begin let - line 3
	## begin dispatch - line 3
	## begin new - line 3
	VR2	<-	Complex_protObj
	VI0	<-	VR2
	call	Object.copy
	VR2	<-	VI0
	call	Complex_init
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid0
	jumpt	VR2 dispatch_notvoid0
	VR2	<-	str_const0
	VR5	<-	3
	# boxing integer from VR5 to VR4
	VR4	<-	Int_protObj
	VI0	<-	VR4
	call Object.copy
	VR4	<-	VI0
	store	VR5 [VR4, 12]
	# end boxing
	VI0	<-	VR2
	VI1	<-	VR4
	call	_dispatch_abort
dispatch_notvoid0:
	## actual parameter 1
	VR3	<-	int_const0.val
	load	VR3 [VR3, 0]
	## actual parameter 2
	VR4	<-	int_const1.val
	load	VR4 [VR4, 0]
	## store self and actual parameters into VI's
	VI0	<-	VR2
	VI1	<-	VR3
	VI2	<-	VR4
	## compute the target address
	load	VR3 [VR2, 8]
	load	VR3 [VR3, 28]
	call	VR3
	## fetch (and maybe unbox) the result
	VR2	<-	VI0
	VR1	<-	VR2
	## let var c in VR1
	## begin if-then-else - line 4
	## = operator - line 4
	## create the result object - not in the original source
	## begin new - line 4
	VR2	<-	Bool_protObj
	VI0	<-	VR2
	call	Object.copy
	VR2	<-	VI0
	call	Bool_init
	## begin dispatch - line 4
	## begin dispatch - line 4
	VR3	<-	VR1
	## caller in VR3
	## dispatch to void handling, ends at dispatch_notvoid1
	jumpt	VR3 dispatch_notvoid1
	VR3	<-	str_const0
	VR6	<-	4
	# boxing integer from VR6 to VR5
	VR5	<-	Int_protObj
	VI0	<-	VR5
	call Object.copy
	VR5	<-	VI0
	store	VR6 [VR5, 12]
	# end boxing
	VI0	<-	VR3
	VI1	<-	VR5
	call	_dispatch_abort
dispatch_notvoid1:
	## store self and actual parameters into VI's
	VI0	<-	VR3
	## compute the target address
	load	VR4 [VR3, 8]
	load	VR4 [VR4, 40]
	call	VR4
	## fetch (and maybe unbox) the result
	VR3	<-	VI0
	## caller in VR3
	## dispatch to void handling, ends at dispatch_notvoid2
	jumpt	VR3 dispatch_notvoid2
	VR3	<-	str_const0
	VR6	<-	4
	# boxing integer from VR6 to VR5
	VR5	<-	Int_protObj
	VI0	<-	VR5
	call Object.copy
	VR5	<-	VI0
	store	VR6 [VR5, 12]
	# end boxing
	VI0	<-	VR3
	VI1	<-	VR5
	call	_dispatch_abort
dispatch_notvoid2:
	## store self and actual parameters into VI's
	VI0	<-	VR3
	## compute the target address
	load	VR4 [VR3, 8]
	load	VR4 [VR4, 44]
	call	VR4
	## fetch (and maybe unbox) the result
	VR3	<-	VI0
	## begin dispatch - line 4
	VR4	<-	VR1
	## caller in VR4
	## dispatch to void handling, ends at dispatch_notvoid3
	jumpt	VR4 dispatch_notvoid3
	VR4	<-	str_const0
	VR7	<-	4
	# boxing integer from VR7 to VR6
	VR6	<-	Int_protObj
	VI0	<-	VR6
	call Object.copy
	VR6	<-	VI0
	store	VR7 [VR6, 12]
	# end boxing
	VI0	<-	VR4
	VI1	<-	VR6
	call	_dispatch_abort
dispatch_notvoid3:
	## store self and actual parameters into VI's
	VI0	<-	VR4
	## compute the target address
	load	VR5 [VR4, 8]
	load	VR5 [VR5, 36]
	call	VR5
	## fetch (and maybe unbox) the result
	VR4	<-	VI0
	VR3	<-	VR3 = VR4
	store	VR3 [VR2, 12]
	## condition in VR2, load effective value into VR3
	load	VR3 [VR2, 12]
	jumpf	VR3 ite_false0
	## begin true branch
	## begin dispatch - line 5
	VR2	<-	VR0
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid4
	jumpt	VR2 dispatch_notvoid4
	VR2	<-	str_const0
	VR5	<-	5
	# boxing integer from VR5 to VR4
	VR4	<-	Int_protObj
	VI0	<-	VR4
	call Object.copy
	VR4	<-	VI0
	store	VR5 [VR4, 12]
	# end boxing
	VI0	<-	VR2
	VI1	<-	VR4
	call	_dispatch_abort
dispatch_notvoid4:
	## actual parameter 1
	VR3	<-	str_const1
	## store self and actual parameters into VI's
	VI0	<-	VR2
	VI1	<-	VR3
	## compute the target address
	load	VR3 [VR2, 8]
	load	VR3 [VR3, 12]
	call	VR3
	## fetch (and maybe unbox) the result
	VR2	<-	VI0
	jump	ite_end0
	## begin false branch
ite_false0:
	## begin dispatch - line 6
	VR2	<-	VR0
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid5
	jumpt	VR2 dispatch_notvoid5
	VR2	<-	str_const0
	VR5	<-	6
	# boxing integer from VR5 to VR4
	VR4	<-	Int_protObj
	VI0	<-	VR4
	call Object.copy
	VR4	<-	VI0
	store	VR5 [VR4, 12]
	# end boxing
	VI0	<-	VR2
	VI1	<-	VR4
	call	_dispatch_abort
dispatch_notvoid5:
	## actual parameter 1
	VR3	<-	str_const2
	## store self and actual parameters into VI's
	VI0	<-	VR2
	VI1	<-	VR3
	## compute the target address
	load	VR3 [VR2, 8]
	load	VR3 [VR3, 12]
	call	VR3
	## fetch (and maybe unbox) the result
	VR2	<-	VI0
ite_end0:
	## store let result over let var c
	VR1	<-	VR2
	## store result into the output register
	VI0	<-	VR1
	return
.end

.function "Complex.init", 3, 1
Complex.init:
	## store self and arguments into the reserved VR0..VR2
	VR0	<-	VI0
	VR1	<-	VI1
	VR2	<-	VI2
	## = operator - line 18
	## create the result object - not in the original source
	## begin new - line 18
	VR3	<-	Bool_protObj
	VI0	<-	VR3
	call	Object.copy
	VR3	<-	VI0
	call	Bool_init
	load	VR4 [VR0, 12]
	VR5	<-	VR1
	VR4	<-	VR4 = VR5
	store	VR4 [VR3, 12]
	## = operator - line 19
	## create the result object - not in the original source
	## begin new - line 19
	VR3	<-	Bool_protObj
	VI0	<-	VR3
	call	Object.copy
	VR3	<-	VI0
	call	Bool_init
	load	VR4 [VR0, 16]
	VR5	<-	VR2
	VR4	<-	VR4 = VR5
	store	VR4 [VR3, 12]
	VR3	<-	VR0
	## store result into the output register
	VI0	<-	VR3
	return
.end

.function "Complex.print", 1, 1
Complex.print:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## begin if-then-else - line 25
	## = operator - line 25
	## create the result object - not in the original source
	## begin new - line 25
	VR1	<-	Bool_protObj
	VI0	<-	VR1
	call	Object.copy
	VR1	<-	VI0
	call	Bool_init
	load	VR2 [VR0, 16]
	VR3	<-	int_const2.val
	load	VR3 [VR3, 0]
	VR2	<-	VR2 = VR3
	store	VR2 [VR1, 12]
	## condition in VR1, load effective value into VR2
	load	VR2 [VR1, 12]
	jumpf	VR2 ite_false1
	## begin true branch
	## begin dispatch - line 26
	VR1	<-	VR0
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid6
	jumpt	VR1 dispatch_notvoid6
	VR1	<-	str_const0
	VR4	<-	26
	# boxing integer from VR4 to VR3
	VR3	<-	Int_protObj
	VI0	<-	VR3
	call Object.copy
	VR3	<-	VI0
	store	VR4 [VR3, 12]
	# end boxing
	VI0	<-	VR1
	VI1	<-	VR3
	call	_dispatch_abort
dispatch_notvoid6:
	## actual parameter 1
	load	VR2 [VR0, 12]
	# boxing integer from VR2 to VR3
	VR3	<-	Int_protObj
	VI0	<-	VR3
	call Object.copy
	VR3	<-	VI0
	store	VR2 [VR3, 12]
	# end boxing
	VR2	<-	VR3
	## store self and actual parameters into VI's
	VI0	<-	VR1
	VI1	<-	VR2
	## compute the target address
	load	VR2 [VR1, 8]
	load	VR2 [VR2, 16]
	call	VR2
	## fetch (and maybe unbox) the result
	VR1	<-	VI0
	jump	ite_end1
	## begin false branch
ite_false1:
	## begin dispatch - line 27
	## begin dispatch - line 27
	## begin dispatch - line 27
	## begin dispatch - line 27
	VR1	<-	VR0
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid7
	jumpt	VR1 dispatch_notvoid7
	VR1	<-	str_const0
	VR4	<-	27
	# boxing integer from VR4 to VR3
	VR3	<-	Int_protObj
	VI0	<-	VR3
	call Object.copy
	VR3	<-	VI0
	store	VR4 [VR3, 12]
	# end boxing
	VI0	<-	VR1
	VI1	<-	VR3
	call	_dispatch_abort
dispatch_notvoid7:
	## actual parameter 1
	load	VR2 [VR0, 12]
	# boxing integer from VR2 to VR3
	VR3	<-	Int_protObj
	VI0	<-	VR3
	call Object.copy
	VR3	<-	VI0
	store	VR2 [VR3, 12]
	# end boxing
	VR2	<-	VR3
	## store self and actual parameters into VI's
	VI0	<-	VR1
	VI1	<-	VR2
	## compute the target address
	load	VR2 [VR1, 8]
	load	VR2 [VR2, 16]
	call	VR2
	## fetch (and maybe unbox) the result
	VR1	<-	VI0
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid8
	jumpt	VR1 dispatch_notvoid8
	VR1	<-	str_const0
	VR4	<-	27
	# boxing integer from VR4 to VR3
	VR3	<-	Int_protObj
	VI0	<-	VR3
	call Object.copy
	VR3	<-	VI0
	store	VR4 [VR3, 12]
	# end boxing
	VI0	<-	VR1
	VI1	<-	VR3
	call	_dispatch_abort
dispatch_notvoid8:
	## actual parameter 1
	VR2	<-	str_const3
	## store self and actual parameters into VI's
	VI0	<-	VR1
	VI1	<-	VR2
	## compute the target address
	load	VR2 [VR1, 8]
	load	VR2 [VR2, 12]
	call	VR2
	## fetch (and maybe unbox) the result
	VR1	<-	VI0
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid9
	jumpt	VR1 dispatch_notvoid9
	VR1	<-	str_const0
	VR4	<-	27
	# boxing integer from VR4 to VR3
	VR3	<-	Int_protObj
	VI0	<-	VR3
	call Object.copy
	VR3	<-	VI0
	store	VR4 [VR3, 12]
	# end boxing
	VI0	<-	VR1
	VI1	<-	VR3
	call	_dispatch_abort
dispatch_notvoid9:
	## actual parameter 1
	load	VR2 [VR0, 16]
	# boxing integer from VR2 to VR3
	VR3	<-	Int_protObj
	VI0	<-	VR3
	call Object.copy
	VR3	<-	VI0
	store	VR2 [VR3, 12]
	# end boxing
	VR2	<-	VR3
	## store self and actual parameters into VI's
	VI0	<-	VR1
	VI1	<-	VR2
	## compute the target address
	load	VR2 [VR1, 8]
	load	VR2 [VR2, 16]
	call	VR2
	## fetch (and maybe unbox) the result
	VR1	<-	VI0
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid10
	jumpt	VR1 dispatch_notvoid10
	VR1	<-	str_const0
	VR4	<-	27
	# boxing integer from VR4 to VR3
	VR3	<-	Int_protObj
	VI0	<-	VR3
	call Object.copy
	VR3	<-	VI0
	store	VR4 [VR3, 12]
	# end boxing
	VI0	<-	VR1
	VI1	<-	VR3
	call	_dispatch_abort
dispatch_notvoid10:
	## actual parameter 1
	VR2	<-	str_const4
	## store self and actual parameters into VI's
	VI0	<-	VR1
	VI1	<-	VR2
	## compute the target address
	load	VR2 [VR1, 8]
	load	VR2 [VR2, 12]
	call	VR2
	## fetch (and maybe unbox) the result
	VR1	<-	VI0
ite_end1:
	## store result into the output register
	VI0	<-	VR1
	return
.end

.function "Complex.reflect_0", 1, 1
Complex.reflect_0:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## = operator - line 33
	## create the result object - not in the original source
	## begin new - line 33
	VR1	<-	Bool_protObj
	VI0	<-	VR1
	call	Object.copy
	VR1	<-	VI0
	call	Bool_init
	load	VR2 [VR0, 12]
	## unary - operator - line 33
	load	VR3 [VR0, 12]
	VR3	<-	0 - VR3
	VR2	<-	VR2 = VR3
	store	VR2 [VR1, 12]
	## = operator - line 34
	## create the result object - not in the original source
	## begin new - line 34
	VR1	<-	Bool_protObj
	VI0	<-	VR1
	call	Object.copy
	VR1	<-	VI0
	call	Bool_init
	load	VR2 [VR0, 16]
	## unary - operator - line 34
	load	VR3 [VR0, 16]
	VR3	<-	0 - VR3
	VR2	<-	VR2 = VR3
	store	VR2 [VR1, 12]
	VR1	<-	VR0
	## store result into the output register
	VI0	<-	VR1
	return
.end

.function "Complex.reflect_X", 1, 1
Complex.reflect_X:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## = operator - line 41
	## create the result object - not in the original source
	## begin new - line 41
	VR1	<-	Bool_protObj
	VI0	<-	VR1
	call	Object.copy
	VR1	<-	VI0
	call	Bool_init
	load	VR2 [VR0, 16]
	## unary - operator - line 41
	load	VR3 [VR0, 16]
	VR3	<-	0 - VR3
	VR2	<-	VR2 = VR3
	store	VR2 [VR1, 12]
	VR1	<-	VR0
	## store result into the output register
	VI0	<-	VR1
	return
.end

.function "Complex.reflect_Y", 1, 1
Complex.reflect_Y:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## = operator - line 48
	## create the result object - not in the original source
	## begin new - line 48
	VR1	<-	Bool_protObj
	VI0	<-	VR1
	call	Object.copy
	VR1	<-	VI0
	call	Bool_init
	load	VR2 [VR0, 12]
	## unary - operator - line 48
	load	VR3 [VR0, 12]
	VR3	<-	0 - VR3
	VR2	<-	VR2 = VR3
	store	VR2 [VR1, 12]
	VR1	<-	VR0
	## store result into the output register
	VI0	<-	VR1
	return
.end

#### data section
	.data
#### object tags
_int_tag:
	DW	1
_bool_tag:
	DW	2
_string_tag:
	DW	3
_Object_tag:
	DW	0
_IO_tag:
	DW	4
_Main_tag:
	DW	5
_Complex_tag:
	DW	6
#### constants
str_const16:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DS	4
str_const15:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const3
	DB	"Complex"
	DS	1
str_const14:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const4
	DB	"Main"
	DS	4
str_const13:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const0
	DB	"IO"
	DS	2
str_const12:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const5
	DB	"String"
	DS	2
str_const11:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const4
	DB	"Bool"
	DS	4
str_const10:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const1
	DB	"Int"
	DS	1
str_const9:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const5
	DB	"Object"
	DS	2
str_const8:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const6
	DB	"_prim_slot"
	DS	2
str_const7:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const7
	DB	"SELF_TYPE"
	DS	3
str_const6:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const7
	DB	"_no_class"
	DS	3
str_const5:
	DW	3
	DW	8
	DL	String_dispatch
	DL	int_const8
	DB	"<basic class>"
	DS	3
str_const4:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const9
	DB	"I"
	DS	3
str_const3:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const9
	DB	"+"
	DS	3
str_const2:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const1
	DB	"=(\n"
	DS	1
str_const1:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const1
	DB	"=)\n"
	DS	1
str_const0:
	DW	3
	DW	11
	DL	String_dispatch
	DL	int_const10
	DB	"_tests/advanced/complex.cl"
	DS	2
int_const10:
	DW	1
	DW	4
	DL	Object_dispatch
int_const10.val:
	DW	26
int_const9:
	DW	1
	DW	4
	DL	Object_dispatch
int_const9.val:
	DW	1
int_const8:
	DW	1
	DW	4
	DL	Object_dispatch
int_const8.val:
	DW	13
int_const7:
	DW	1
	DW	4
	DL	Object_dispatch
int_const7.val:
	DW	9
int_const6:
	DW	1
	DW	4
	DL	Object_dispatch
int_const6.val:
	DW	10
int_const5:
	DW	1
	DW	4
	DL	Object_dispatch
int_const5.val:
	DW	6
int_const4:
	DW	1
	DW	4
	DL	Object_dispatch
int_const4.val:
	DW	4
int_const3:
	DW	1
	DW	4
	DL	Object_dispatch
int_const3.val:
	DW	7
int_const2:
	DW	1
	DW	4
	DL	Object_dispatch
int_const2.val:
	DW	0
int_const1:
	DW	1
	DW	4
	DL	Object_dispatch
int_const1.val:
	DW	3
int_const0:
	DW	1
	DW	4
	DL	Object_dispatch
int_const0.val:
	DW	2
bool_const1:
	DW	2
	DW	4
	DL	Object_dispatch
	DW	1
#### class names by tag
class_nameTab:
	DL	str_const9
	DL	str_const10
	DL	str_const11
	DL	str_const12
	DL	str_const13
	DL	str_const14
	DL	str_const15
#### prototypes and init by tag
class_objTab:
	DL	Object_protObj
	DL	Object_init
	DL	Int_protObj
	DL	Int_init
	DL	Bool_protObj
	DL	Bool_init
	DL	String_protObj
	DL	String_init
	DL	IO_protObj
	DL	IO_init
	DL	Main_protObj
	DL	Main_init
	DL	Complex_protObj
	DL	Complex_init
#### dispatch tables by tag
Bool_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
IO_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	IO.out_string
	DL	IO.out_int
	DL	IO.in_string
	DL	IO.in_int
Main_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	IO.out_string
	DL	IO.out_int
	DL	IO.in_string
	DL	IO.in_int
	DL	Main.main
Complex_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	IO.out_string
	DL	IO.out_int
	DL	IO.in_string
	DL	IO.in_int
	DL	Complex.init
	DL	Complex.print
	DL	Complex.reflect_0
	DL	Complex.reflect_X
	DL	Complex.reflect_Y
#### prototype objects
Object_protObj:
	DW	0
	DW	3
	DL	Object_dispatch
Bool_protObj:
	DW	2
	DW	4
	DL	Bool_dispatch
	DW	0
IO_protObj:
	DW	4
	DW	3
	DL	IO_dispatch
Main_protObj:
	DW	5
	DW	3
	DL	Main_dispatch
Complex_protObj:
	DW	6
	DW	5
	DL	Complex_dispatch
	DL	int_const2.val
	DL	int_const2.val
