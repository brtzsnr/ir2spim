program EASTDisplay;
(* Expression AST
 * Parser pentru expresii aritmentice intregi. 
 * Adunari, scaderi, inmultiri, impartiri si paranteze.
 * Accepta variabile de tipul $1, $2.
 * Spatiile sunt ignorate.
 *   1 + ($1 + 5) * $2
 * Citeste expresia, apoi afiseaza AST-ul corespunzator expresiei.
 *)

(********* Lexer *********)

(* Tokenii sunt caractere, spatiile sunt ignorate *)
type Tokenizer = object
    currentToken : char;
    firstTime : boolean;
    
  procedure init
  begin
    firstTime := true;
  end;
  
  function lookAhead : char
  begin
    if firstTime then lookAhead := nextToken;
    firstTime := false;
    lookAhead := currentToken;
  end;
  
  function nextToken : char
  begin
    repeat
      currentToken := readChar;
    until currentToken <> ' '; # Ignora spatiile
    nextToken := currentToken;
  end;
    
  function readChar : char  # Functia trebuie reimplementata
  begin
    readChar := (char)0;
  end;
end;

(* un Tokenizer care citeste date de la intrare *)
type StdinTokenizer = object(Tokenizer)
  function readChar : char
  begin
    readChar := readCharacter;
  end;
end;

(********* Manage indentation **********)
type IndentManager = object
  level : integer;
  procedure init
  begin
    level := 0;
  end;
  procedure increase
  begin
    level := level + 1;
  end;
  procedure decrease
  begin
    level := level - 1;
  end;
  procedure startLine
  var
    i:integer;
  begin
    i:=0;
    while i<level do
    begin
      writeString("  ");
      i:=i+1;
    end;
  end;
  procedure endLine
  begin
    writeCharacter((char)10);
  end;
end;

(********* Syntax tree *********)

type Expression = object
   procedure destroy
   begin
     dispose(this);
   end;
   procedure display
   begin
   end;
end;

type Constant = object(Expression)
  value : integer;
  procedure display
  begin
    indent.startLine;
    writeInteger(value);
    indent.endLine;
  end;
end;
  
type Variable = object(Expression)
  index : integer;
  procedure display
  begin
    indent.startLine;
    writeCharacter('$');
    writeInteger(index);
    indent.endLine;
  end;
end;

type Operation = object(Expression)
  oper1, oper2 : ref Expression;
  
  procedure destroy
  begin
    oper1.destroy;
    oper2.destroy;
    Expression.destroy;
  end;
  
  procedure init(o1,o2: ref Expression)
  begin
    oper1 := ref o1;
    oper2 := ref o2;
  end;

  procedure displayOperation(c:char)
  begin
    indent.startLine;
    writeCharacter(c);
    indent.endLine;
    indent.increase;
    oper1.display;
    oper2.display;
    indent.decrease;
  end;
end;

type Addition = object(Operation)
  procedure display
  begin
    displayOperation('+');
  end;
end;

type Subtraction = object(Operation)
  procedure display
  begin
    displayOperation('-');
  end;
end;

type Multiplication = object(Operation)
  procedure display
  begin
    displayOperation('*');
  end;
end;

type Division = object(Operation)
  procedure display
  begin
    displayOperation('/');
  end;
end;

var
  e : ref Expression;
  input : StdinTokenizer;
  indent : IndentManager;

(********* Parser *********)

function newOperation(op:char) : ref Operation
var
  ea: ref Addition;
  es: ref Subtraction;
  em: ref Multiplication;
  ed: ref Division;
begin
  if op='+' then
  begin
    new(ea); newOperation := ref ea;
  end
  else 
    if op='-' then
    begin
      new(es); newOperation := ref es;
    end
    else
      if op='*' then
      begin
        new(em); newOperation := ref em;      
      end
      else
      begin
        new(ed); newOperation := ref ed;      
      end;
end;

function parseAddExpression(stream: ref Tokenizer) : ref Expression
var
  e, r : ref Expression;
  x: ref Operation;
  op: char;  
begin
  e := ref parseMulExpression(stream); # e poate fi null in caz de eroare la parsare
  
  while not isNull(e) and (stream.LookAhead='+' or stream.LookAhead='-') do
  begin
    op := stream.nextToken;
    r := ref parseMulExpression(stream); 
    if isNull(r) then
    begin
      e.destroy; e := ref null;
    end
    else
      begin
        x := ref newOperation(op);
        x.init(e, r);
        e:= ref x;
      end;
  end;
  parseAddExpression := ref e;
end;

function parseMulExpression(stream: ref Tokenizer) : ref Expression
var
  e, r : ref Expression;
  x: ref Operation;
  op: char;  
begin
  e := ref parseOperand(stream); # e poate fi null in caz de eroare la parsare
  
  while not isNull(e) and (stream.LookAhead='*' or stream.LookAhead='/') do
  begin
    op := stream.nextToken;
    r := ref parseOperand(stream); 
    if isNull(r) then
    begin
      e.destroy; e := ref null;
    end
    else
      begin
        x := ref newOperation(op);
        x.init(e, r);
        e:= ref x;
      end;
  end;
  parseMulExpression := ref e;
end;

function parseOperand(stream: ref Tokenizer) : ref Expression
var
  e : ref Expression;
  ev : ref Variable;
  ec : ref Constant; 
  c : char;
begin

  (* Operand := (  expresie ) *)  
  if stream.lookAhead = '(' then
  begin
    c := stream.nextToken;
    e := ref parseAddExpression(stream);
    if not isNull(e) then
    begin
      if stream.nextToken <> ')' then
      begin
        writeString ("Eroare: lipseste ')' ! ");
        e.destroy; e:= ref null;
      end;      
    end
  end
  else

    (* Operand := $ variabila *)  
    if stream.lookAhead = '$' then
    begin
      c := stream.nextToken;
      if not isDigit(stream.lookAhead) then
      begin
        writeString ("Eroare: lipseste numarul variabilei ! ");
        e:= ref null;
      end
      else
      begin
        new(ev);
        ev.index := evalInteger(stream);
        e := ref ev;
      end;
    end
    else 

      (* Operand := constanta *)  
      if isDigit(stream.lookAhead) then
      begin
        new(ec);
        ec.value := evalInteger(stream);
        e := ref ec;
      end
      else
      begin
        writeString("Eroare: lipseste un operand! ");
        e:= ref null;
      end;      
  
  parseOperand := ref e;
end;

function isDigit(c:char) : boolean
begin
  isDigit := (c >= '0') and (c <= '9');
end;
  
function toInt(c:char) : integer
begin
  toInt := (integer)c - (integer)'0';
end;
  
function evalInteger(stream:ref Tokenizer) : integer
var
  n : integer;
begin
  n := 0;
  while isDigit(stream.lookAhead) do
    n := n * 10 + toInt(stream.nextToken);
  evalInteger := n;
end;

begin
  input.init;
  indent.init;
  e := ref parseAddExpression(input);
  if not isNull(e) then
  begin
    e.display;
    e.destroy;
  end
end.
