
program P001_01;

(*
 * Program fara sens
 *)

###########################################################
# VARIABILE GLOBALE
###########################################################
var
    ##### tipuri de baza
    i0, i1, i2, max : integer;  # variabile intregi
    b0, b1, b2 : boolean;
    c0, c1, c2 : char;        					# caractere
    r_0, r_1, r_2, r4 : real;

    (* array *)
    a_int : array[1..10] of integer;
    a_char : array[1..20] of char;
    a_real : array[4..12] of real;
    a_bool1, a_bool2 : array[1..100] of boolean;

###########################################################
# PROCEDURI SI FUNCTII
###########################################################

(*
 * Procedura 1
 * cu argumente si fara variabile locale
 *)
procedure Proc1 (i,j,k : integer; c0,c1:char; ar : array[1..10] of real)
begin
      writeInteger(i);
      writeCharacter(c0);
      writeReal(ar[i+j]);

      r_0 := 10.3;
      r_1 := r_0 + 12.5;
      i0 := 1000;
      c0 := 'a'; # aici se refera parametrul c0 al procedurii, nu variabila globala c0
      a_char := "AAAAAAAAAAAAAAAAAAA"; # ultimul caracter este 0

end;

(*
 * Procedura 2
 * fara argumente si cu variabile locale
 *)
procedure Proc2
var
    loc_var1 : integer;
    loc_var2 : char;
    loc_var3 : array[2..20] of real;
begin
    loc_var1 := readInteger;
    loc_var2 := readCharacter;
    loc_var3[loc_var1] := readReal;
end;

(*
 * Functie 1
 *)
function Func1 (i,j,k : integer; c0,c1:char; ar : array[1..10] of real) : integer
begin
		 Func1 := 10
end;


(*
 * Functie 2
 *)
function Func2 : real
begin
		 Func2 := 0.1
end;


###########################################################
# PROGRAM PRINCIPAL
###########################################################
begin

     # IF
     if (i0 <= i1) then
        max := i1
     else max := i2;

     #IF
     if i0 < i1 and b0 then
     begin
          max := i2; # blocul are doua instructiuni, ultima este vida
     end
     else
          max := (i2 - i1) * i1;

     # WHILE
     while (b0 xor b1) do
     begin
         i0 := i1 + i2;
         i0 := i2 - i1
     end;

     # REPEAT
     repeat
            c0 := c1;
            c1 := c2;
            a_bool1 := a_bool2;
     until b0 or i0 <= i2 or false;

      # IF
     if b0 or b1 and b2 xor b0 then
        i0 := (i1 * i2) div i0
     else
          if (i0 + i1 div i2) <> i1 and b0 then
             i0 := i2 mod i1
          else
              begin
                   i0 := i0 - i1;
                   i0 := i0 + i2
              end;

     # DANGLING ELSE
     if b0 or b1 and i1 <> i0 then
          if ((i0 + i1 div i2) <> i1 ) and not b0 then
             i0 := i2 mod i1
          else
              begin
                   i0 := i0 - i1;
                   i0 := i0 + i2
              end
     else
     		 i0:= i0 - 100

end.
