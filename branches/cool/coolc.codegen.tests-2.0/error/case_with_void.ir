#### code section
	.code

.function "Void dispatch handler", 2, 0
void_disp_handler:
	VR1	<-	VI0
	VR3	<-	VI1
	# boxing integer from VR3 to VR2
	VR2	<-	Int_protObj
	( VR2 )	<-	call Object.copy ( VR2 )
	store	VR3 [VR2, 12]
	# end boxing
	call _dispatch_abort ( VR1 VR2 )
	return
.end

.function "Void case handler", 2, 0
void_case_handler:
	VR1	<-	VI0
	VR3	<-	VI1
	# boxing integer from VR3 to VR2
	VR2	<-	Int_protObj
	( VR2 )	<-	call Object.copy ( VR2 )
	store	VR3 [VR2, 12]
	# end boxing
	call _case_abort2 ( VR1 VR2 )
	return
.end

.function "A init code", 1, 0
A_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call Object_init ( VR0 )
	VR1	<-	0
	store	VR1 [VR0, 12]
	return	
.end

.function "B init code", 1, 0
B_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call A_init ( VR0 )
	return	
.end

.function "C init code", 1, 0
C_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call A_init ( VR0 )
	return	
.end

.function "Main init code", 1, 0
Main_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call Object_init ( VR0 )
	## begin assign - line 37
	## begin new - line 37
	VR1	<-	IO_protObj
	( VR1 )	<-	call Object.copy ( VR1 )
	call IO_init ( VR1 )
	## store rhs in VR1 to attribute io
	store	VR1 [VR0, 16]
	return	
.end

.function "A.init", 1, 1
A.init:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## begin assign - line 8
	VR1	<-	10
	## store rhs in VR1 to attribute i
	store	VR1 [VR0, 12]
	VR1	<-	VR0
	return	VR1
.end

.function "B.init", 1, 1
B.init:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## begin assign - line 18
	VR1	<-	20
	## store rhs in VR1 to attribute i
	store	VR1 [VR0, 12]
	VR1	<-	VR0
	return	VR1
.end

.function "C.init", 1, 1
C.init:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## begin assign - line 28
	VR1	<-	30
	## store rhs in VR1 to attribute i
	store	VR1 [VR0, 12]
	VR1	<-	VR0
	return	VR1
.end

.function "Main.main", 1, 1
Main.main:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## begin typed case - line 41
	load	VR1 [VR0, 12]
	## case on void handling, ends at case0_notvoid
	jumpt	VR1 case0_notvoid
	VR2	<-	str_const0
	VR3	<-	41
	call void_case_handler ( VR2 VR3 )
case0_notvoid:
	load	VR2 [VR1, 0]
case0_tag7:
	VR3	<-	VR2 = 7
	jumpf	VR3 case0_tag6
	## begin dispatch - line 43
	load	VR2 [VR0, 16]
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid0
	jumpt	VR2 dispatch_notvoid0
	VR3	<-	str_const0
	VR4	<-	43
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid0:
	## actual parameter 1
	VR3	<-	str_const2
	## prepare self and actual parameters
	## compute the target address
	load	VR4 [VR2, 8]
	load	VR4 [VR4, 12]
	( VR2 )	<-	call VR4 ( VR2 VR3 )
	jump	case0_end
case0_tag6:
	VR3	<-	VR2 = 6
	jumpf	VR3 case0_error
	## begin dispatch - line 42
	load	VR2 [VR0, 16]
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid1
	jumpt	VR2 dispatch_notvoid1
	VR3	<-	str_const0
	VR4	<-	42
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid1:
	## actual parameter 1
	VR3	<-	str_const1
	## prepare self and actual parameters
	## compute the target address
	load	VR4 [VR2, 8]
	load	VR4 [VR4, 12]
	( VR2 )	<-	call VR4 ( VR2 VR3 )
	jump	case0_end
case0_error:
	call _case_abort ( VR1 )
case0_end:
	VR1	<-	VR2
	VR1	<-	0
	return	VR1
.end

#### data section
	.data
#### constants
str_const16:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const3
	DS	4
str_const15:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const4
	DB	"Main"
	DS	4
str_const14:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const5
	DB	"C"
	DS	3
str_const13:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const5
	DB	"B"
	DS	3
str_const12:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const5
	DB	"A"
	DS	3
str_const11:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const6
	DB	"IO"
	DS	2
str_const10:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const7
	DB	"String"
	DS	2
str_const9:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const4
	DB	"Bool"
	DS	4
str_const8:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const8
	DB	"Int"
	DS	1
str_const7:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const7
	DB	"Object"
	DS	2
str_const6:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const0
	DB	"_prim_slot"
	DS	2
str_const5:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const9
	DB	"SELF_TYPE"
	DS	3
str_const4:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const9
	DB	"_no_class"
	DS	3
str_const3:
	DW	3
	DW	8
	DL	String_dispatch
	DL	int_const10
	DB	"<basic class>"
	DS	3
str_const2:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const6
	DB	"C\n"
	DS	2
str_const1:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const6
	DB	"B\n"
	DS	2
str_const0:
	DW	3
	DW	10
	DL	String_dispatch
	DL	int_const11
	DB	"error/case_with_void.cl"
	DS	1
int_const11:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	23
int_const10:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	13
int_const9:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	9
int_const8:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	3
int_const7:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	6
int_const6:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	2
int_const5:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	1
int_const4:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	4
int_const3:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	0
int_const2:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	30
int_const1:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	20
int_const0:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	10
bool_const1:
	DW	2
	DW	4
	DL	Object_dispatch
	DW	1
bool_const0:
	DW	2
	DW	4
	DL	Object_dispatch
	DW	0
#### class names by tag
class_nameTab:
	DL	str_const7
	DL	str_const8
	DL	str_const9
	DL	str_const10
	DL	str_const11
	DL	str_const12
	DL	str_const13
	DL	str_const14
	DL	str_const15
#### prototypes and init by tag
class_objTab:
	DL	Object_protObj
	DL	Object_init
	DL	Int_protObj
	DL	Int_init
	DL	Bool_protObj
	DL	Bool_init
	DL	String_protObj
	DL	String_init
	DL	IO_protObj
	DL	IO_init
	DL	A_protObj
	DL	A_init
	DL	B_protObj
	DL	B_init
	DL	C_protObj
	DL	C_init
	DL	Main_protObj
	DL	Main_init
#### dispatch tables
A_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	A.init
B_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	B.init
C_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	C.init
Main_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	Main.main
#### prototype objects
A_protObj:
	DW	5
	DW	4
	DL	A_dispatch
	DW	0
B_protObj:
	DW	6
	DW	4
	DL	B_dispatch
	DW	0
C_protObj:
	DW	7
	DW	4
	DL	C_dispatch
	DW	0
Main_protObj:
	DW	8
	DW	5
	DL	Main_dispatch
	DW	0
	DW	0
