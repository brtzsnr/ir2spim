#### code section
	.code

.function "Void dispatch handler", 2, 0
void_disp_handler:
	VR1	<-	VI0
	VR3	<-	VI1
	# boxing integer from VR3 to VR2
	VR2	<-	Int_protObj
	( VR2 )	<-	call Object.copy ( VR2 )
	store	VR3 [VR2, 12]
	# end boxing
	call _dispatch_abort ( VR1 VR2 )
	return
.end

.function "Void case handler", 2, 0
void_case_handler:
	VR1	<-	VI0
	VR3	<-	VI1
	# boxing integer from VR3 to VR2
	VR2	<-	Int_protObj
	( VR2 )	<-	call Object.copy ( VR2 )
	store	VR3 [VR2, 12]
	# end boxing
	call _case_abort2 ( VR1 VR2 )
	return
.end

.function "Main init code", 1, 0
Main_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call IO_init ( VR0 )
	return	
.end

.function "List init code", 1, 0
List_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call Object_init ( VR0 )
	return	
.end

.function "Cons init code", 1, 0
Cons_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call List_init ( VR0 )
	VR1	<-	0
	store	VR1 [VR0, 12]
	return	
.end

.function "Main.print_list", 2, 1
Main.print_list:
	## store self and arguments into the reserved VR0..VR1
	VR0	<-	VI0
	VR1	<-	VI1
	## begin if-then-else - line 108
	## begin dispatch - line 108
	VR2	<-	VR1
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid0
	jumpt	VR2 dispatch_notvoid0
	VR3	<-	str_const0
	VR4	<-	108
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid0:
	## prepare self and actual parameters
	## compute the target address
	load	VR3 [VR2, 8]
	load	VR3 [VR3, 12]
	( VR2 )	<-	call VR3 ( VR2 )
	jumpf	VR2 ite_false0
	## begin true branch
	## begin dispatch - line 108
	VR2	<-	VR0
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid1
	jumpt	VR2 dispatch_notvoid1
	VR3	<-	str_const0
	VR4	<-	108
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid1:
	## actual parameter 1
	VR3	<-	str_const1
	## prepare self and actual parameters
	## compute the target address
	load	VR4 [VR2, 8]
	load	VR4 [VR4, 12]
	( VR2 )	<-	call VR4 ( VR2 VR3 )
	jump	ite_end0
	## begin false branch
ite_false0:
	## begin dispatch - line 110
	VR2	<-	VR0
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid2
	jumpt	VR2 dispatch_notvoid2
	VR3	<-	str_const0
	VR4	<-	110
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid2:
	## actual parameter 1
	## begin dispatch - line 110
	VR3	<-	VR1
	## caller in VR3
	## dispatch to void handling, ends at dispatch_notvoid3
	jumpt	VR3 dispatch_notvoid3
	VR4	<-	str_const0
	VR5	<-	110
	call void_disp_handler ( VR4 VR5 )
dispatch_notvoid3:
	## prepare self and actual parameters
	## compute the target address
	load	VR4 [VR3, 8]
	load	VR4 [VR4, 16]
	( VR3 )	<-	call VR4 ( VR3 )
	# boxing integer from VR3 to VR4
	VR4	<-	Int_protObj
	( VR4 )	<-	call Object.copy ( VR4 )
	store	VR3 [VR4, 12]
	# end boxing
	VR3	<-	VR4
	## prepare self and actual parameters
	## compute the target address
	load	VR4 [VR2, 8]
	load	VR4 [VR4, 16]
	( VR2 )	<-	call VR4 ( VR2 VR3 )
	## begin dispatch - line 111
	VR2	<-	VR0
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid4
	jumpt	VR2 dispatch_notvoid4
	VR3	<-	str_const0
	VR4	<-	111
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid4:
	## actual parameter 1
	VR3	<-	str_const2
	## prepare self and actual parameters
	## compute the target address
	load	VR4 [VR2, 8]
	load	VR4 [VR4, 12]
	( VR2 )	<-	call VR4 ( VR2 VR3 )
	## begin dispatch - line 112
	VR2	<-	VR0
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid5
	jumpt	VR2 dispatch_notvoid5
	VR3	<-	str_const0
	VR4	<-	112
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid5:
	## actual parameter 1
	## begin dispatch - line 112
	VR3	<-	VR1
	## caller in VR3
	## dispatch to void handling, ends at dispatch_notvoid6
	jumpt	VR3 dispatch_notvoid6
	VR4	<-	str_const0
	VR5	<-	112
	call void_disp_handler ( VR4 VR5 )
dispatch_notvoid6:
	## prepare self and actual parameters
	## compute the target address
	load	VR4 [VR3, 8]
	load	VR4 [VR4, 20]
	( VR3 )	<-	call VR4 ( VR3 )
	## prepare self and actual parameters
	## compute the target address
	load	VR4 [VR2, 8]
	load	VR4 [VR4, 28]
	( VR2 )	<-	call VR4 ( VR2 VR3 )
ite_end0:
	return	VR2
.end

.function "Main.main", 1, 1
Main.main:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## begin assign - line 128
	## begin dispatch - line 128
	## begin dispatch - line 128
	## begin dispatch - line 128
	## begin dispatch - line 128
	## begin dispatch - line 128
	## begin new - line 128
	VR1	<-	List_protObj
	( VR1 )	<-	call Object.copy ( VR1 )
	call List_init ( VR1 )
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid7
	jumpt	VR1 dispatch_notvoid7
	VR2	<-	str_const0
	VR3	<-	128
	call void_disp_handler ( VR2 VR3 )
dispatch_notvoid7:
	## actual parameter 1
	VR2	<-	1
	## prepare self and actual parameters
	## compute the target address
	load	VR3 [VR1, 8]
	load	VR3 [VR3, 24]
	( VR1 )	<-	call VR3 ( VR1 VR2 )
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid8
	jumpt	VR1 dispatch_notvoid8
	VR2	<-	str_const0
	VR3	<-	128
	call void_disp_handler ( VR2 VR3 )
dispatch_notvoid8:
	## actual parameter 1
	VR2	<-	2
	## prepare self and actual parameters
	## compute the target address
	load	VR3 [VR1, 8]
	load	VR3 [VR3, 24]
	( VR1 )	<-	call VR3 ( VR1 VR2 )
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid9
	jumpt	VR1 dispatch_notvoid9
	VR2	<-	str_const0
	VR3	<-	128
	call void_disp_handler ( VR2 VR3 )
dispatch_notvoid9:
	## actual parameter 1
	VR2	<-	3
	## prepare self and actual parameters
	## compute the target address
	load	VR3 [VR1, 8]
	load	VR3 [VR3, 24]
	( VR1 )	<-	call VR3 ( VR1 VR2 )
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid10
	jumpt	VR1 dispatch_notvoid10
	VR2	<-	str_const0
	VR3	<-	128
	call void_disp_handler ( VR2 VR3 )
dispatch_notvoid10:
	## actual parameter 1
	VR2	<-	4
	## prepare self and actual parameters
	## compute the target address
	load	VR3 [VR1, 8]
	load	VR3 [VR3, 24]
	( VR1 )	<-	call VR3 ( VR1 VR2 )
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid11
	jumpt	VR1 dispatch_notvoid11
	VR2	<-	str_const0
	VR3	<-	128
	call void_disp_handler ( VR2 VR3 )
dispatch_notvoid11:
	## actual parameter 1
	VR2	<-	5
	## prepare self and actual parameters
	## compute the target address
	load	VR3 [VR1, 8]
	load	VR3 [VR3, 24]
	( VR1 )	<-	call VR3 ( VR1 VR2 )
	## store rhs in VR1 to attribute mylist
	store	VR1 [VR0, 12]
	## begin loop - line 129
loop_start0:
	## not operator - line 129
	## begin dispatch - line 129
	load	VR1 [VR0, 12]
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid12
	jumpt	VR1 dispatch_notvoid12
	VR2	<-	str_const0
	VR3	<-	129
	call void_disp_handler ( VR2 VR3 )
dispatch_notvoid12:
	## prepare self and actual parameters
	## compute the target address
	load	VR2 [VR1, 8]
	load	VR2 [VR2, 12]
	( VR1 )	<-	call VR2 ( VR1 )
	VR1	<-	1 - VR1
	jumpf	VR1 loop_end0
	## begin dispatch - line 131
	VR1	<-	VR0
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid13
	jumpt	VR1 dispatch_notvoid13
	VR2	<-	str_const0
	VR3	<-	131
	call void_disp_handler ( VR2 VR3 )
dispatch_notvoid13:
	## actual parameter 1
	load	VR2 [VR0, 12]
	## prepare self and actual parameters
	## compute the target address
	load	VR3 [VR1, 8]
	load	VR3 [VR3, 28]
	( VR1 )	<-	call VR3 ( VR1 VR2 )
	## begin assign - line 132
	## begin dispatch - line 132
	load	VR1 [VR0, 12]
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid14
	jumpt	VR1 dispatch_notvoid14
	VR2	<-	str_const0
	VR3	<-	132
	call void_disp_handler ( VR2 VR3 )
dispatch_notvoid14:
	## prepare self and actual parameters
	## compute the target address
	load	VR2 [VR1, 8]
	load	VR2 [VR2, 20]
	( VR1 )	<-	call VR2 ( VR1 )
	## store rhs in VR1 to attribute mylist
	store	VR1 [VR0, 12]
	jump	loop_start0
loop_end0:
	return	VR1
.end

.function "List.isNil", 1, 1
List.isNil:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	VR1	<-	1
	return	VR1
.end

.function "List.head", 1, 1
List.head:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## begin dispatch - line 35
	VR1	<-	VR0
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid15
	jumpt	VR1 dispatch_notvoid15
	VR2	<-	str_const0
	VR3	<-	35
	call void_disp_handler ( VR2 VR3 )
dispatch_notvoid15:
	## prepare self and actual parameters
	## compute the target address
	load	VR2 [VR1, 8]
	load	VR2 [VR2, 0]
	( VR1 )	<-	call VR2 ( VR1 )
	VR1	<-	0
	return	VR1
.end

.function "List.tail", 1, 1
List.tail:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## begin dispatch - line 40
	VR1	<-	VR0
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid16
	jumpt	VR1 dispatch_notvoid16
	VR2	<-	str_const0
	VR3	<-	40
	call void_disp_handler ( VR2 VR3 )
dispatch_notvoid16:
	## prepare self and actual parameters
	## compute the target address
	load	VR2 [VR1, 8]
	load	VR2 [VR2, 0]
	( VR1 )	<-	call VR2 ( VR1 )
	VR1	<-	VR0
	return	VR1
.end

.function "List.cons", 2, 1
List.cons:
	## store self and arguments into the reserved VR0..VR1
	VR0	<-	VI0
	VR1	<-	VI1
	## begin dispatch - line 50
	## begin new - line 50
	VR2	<-	Cons_protObj
	( VR2 )	<-	call Object.copy ( VR2 )
	call Cons_init ( VR2 )
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid17
	jumpt	VR2 dispatch_notvoid17
	VR3	<-	str_const0
	VR4	<-	50
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid17:
	## actual parameter 1
	VR3	<-	VR1
	## actual parameter 2
	VR4	<-	VR0
	## prepare self and actual parameters
	## compute the target address
	load	VR5 [VR2, 8]
	load	VR5 [VR5, 28]
	( VR2 )	<-	call VR5 ( VR2 VR3 VR4 )
	return	VR2
.end

.function "Cons.isNil", 1, 1
Cons.isNil:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	VR1	<-	0
	return	VR1
.end

.function "Cons.head", 1, 1
Cons.head:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	load	VR1 [VR0, 12]
	return	VR1
.end

.function "Cons.tail", 1, 1
Cons.tail:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	load	VR1 [VR0, 16]
	return	VR1
.end

.function "Cons.init", 3, 1
Cons.init:
	## store self and arguments into the reserved VR0..VR2
	VR0	<-	VI0
	VR1	<-	VI1
	VR2	<-	VI2
	## begin assign - line 84
	VR3	<-	VR1
	## store rhs in VR3 to attribute car
	store	VR3 [VR0, 12]
	## begin assign - line 85
	VR3	<-	VR2
	## store rhs in VR3 to attribute cdr
	store	VR3 [VR0, 16]
	VR3	<-	VR0
	return	VR3
.end

#### data section
	.data
#### constants
str_const15:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const1
	DS	4
str_const14:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const4
	DB	"Main"
	DS	4
str_const13:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const4
	DB	"Cons"
	DS	4
str_const12:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const4
	DB	"List"
	DS	4
str_const11:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const2
	DB	"IO"
	DS	2
str_const10:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const6
	DB	"String"
	DS	2
str_const9:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const4
	DB	"Bool"
	DS	4
str_const8:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const3
	DB	"Int"
	DS	1
str_const7:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const6
	DB	"Object"
	DS	2
str_const6:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const7
	DB	"_prim_slot"
	DS	2
str_const5:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const8
	DB	"SELF_TYPE"
	DS	3
str_const4:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const8
	DB	"_no_class"
	DS	3
str_const3:
	DW	3
	DW	8
	DL	String_dispatch
	DL	int_const9
	DB	"<basic class>"
	DS	3
str_const2:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const0
	DB	" "
	DS	3
str_const1:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const0
	DB	"\n"
	DS	3
str_const0:
	DW	3
	DW	9
	DL	String_dispatch
	DL	int_const10
	DB	"advanced/list.cl"
	DS	4
int_const10:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	16
int_const9:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	13
int_const8:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	9
int_const7:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	10
int_const6:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	6
int_const5:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	5
int_const4:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	4
int_const3:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	3
int_const2:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	2
int_const1:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	0
int_const0:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	1
bool_const1:
	DW	2
	DW	4
	DL	Object_dispatch
	DW	1
bool_const0:
	DW	2
	DW	4
	DL	Object_dispatch
	DW	0
#### class names by tag
class_nameTab:
	DL	str_const7
	DL	str_const8
	DL	str_const9
	DL	str_const10
	DL	str_const11
	DL	str_const14
	DL	str_const12
	DL	str_const13
#### prototypes and init by tag
class_objTab:
	DL	Object_protObj
	DL	Object_init
	DL	Int_protObj
	DL	Int_init
	DL	Bool_protObj
	DL	Bool_init
	DL	String_protObj
	DL	String_init
	DL	IO_protObj
	DL	IO_init
	DL	Main_protObj
	DL	Main_init
	DL	List_protObj
	DL	List_init
	DL	Cons_protObj
	DL	Cons_init
#### dispatch tables
Main_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	IO.out_string
	DL	IO.out_int
	DL	IO.in_string
	DL	IO.in_int
	DL	Main.print_list
	DL	Main.main
List_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	List.isNil
	DL	List.head
	DL	List.tail
	DL	List.cons
Cons_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	Cons.isNil
	DL	Cons.head
	DL	Cons.tail
	DL	List.cons
	DL	Cons.init
#### prototype objects
Main_protObj:
	DW	5
	DW	4
	DL	Main_dispatch
	DW	0
List_protObj:
	DW	6
	DW	3
	DL	List_dispatch
Cons_protObj:
	DW	7
	DW	5
	DL	Cons_dispatch
	DW	0
	DW	0
