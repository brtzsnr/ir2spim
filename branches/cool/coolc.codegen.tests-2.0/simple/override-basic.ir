#### code section
	.code

.function "Void dispatch handler", 2, 0
void_disp_handler:
	VR1	<-	VI0
	VR3	<-	VI1
	# boxing integer from VR3 to VR2
	VR2	<-	Int_protObj
	( VR2 )	<-	call Object.copy ( VR2 )
	store	VR3 [VR2, 12]
	# end boxing
	call _dispatch_abort ( VR1 VR2 )
	return
.end

.function "Void case handler", 2, 0
void_case_handler:
	VR1	<-	VI0
	VR3	<-	VI1
	# boxing integer from VR3 to VR2
	VR2	<-	Int_protObj
	( VR2 )	<-	call Object.copy ( VR2 )
	store	VR3 [VR2, 12]
	# end boxing
	call _case_abort2 ( VR1 VR2 )
	return
.end

.function "Base init code", 1, 0
Base_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call IO_init ( VR0 )
	return	
.end

.function "Derived init code", 1, 0
Derived_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call Base_init ( VR0 )
	return	
.end

.function "Main init code", 1, 0
Main_init:
	## store self into the reserved VR0
	VR0	<-	VI0
	call Object_init ( VR0 )
	return	
.end

.function "Base.identify", 1, 1
Base.identify:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## begin dispatch - line 5
	VR1	<-	VR0
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid0
	jumpt	VR1 dispatch_notvoid0
	VR2	<-	str_const0
	VR3	<-	5
	call void_disp_handler ( VR2 VR3 )
dispatch_notvoid0:
	## actual parameter 1
	## begin dispatch - line 5
	VR2	<-	VR0
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid1
	jumpt	VR2 dispatch_notvoid1
	VR3	<-	str_const0
	VR4	<-	5
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid1:
	## prepare self and actual parameters
	## compute the target address
	load	VR3 [VR2, 8]
	load	VR3 [VR3, 8]
	( VR2 )	<-	call VR3 ( VR2 )
	## prepare self and actual parameters
	## compute the target address
	load	VR3 [VR1, 8]
	load	VR3 [VR3, 12]
	( VR1 )	<-	call VR3 ( VR1 VR2 )
	## begin dispatch - line 6
	VR1	<-	VR0
	## caller in VR1
	## dispatch to void handling, ends at dispatch_notvoid2
	jumpt	VR1 dispatch_notvoid2
	VR2	<-	str_const0
	VR3	<-	6
	call void_disp_handler ( VR2 VR3 )
dispatch_notvoid2:
	## actual parameter 1
	VR2	<-	str_const1
	## prepare self and actual parameters
	## compute the target address
	VR3	<-	Base_dispatch
	load	VR3 [VR3, 12]
	( VR1 )	<-	call VR3 ( VR1 VR2 )
	return	VR1
.end

.function "Derived.out_string", 2, 1
Derived.out_string:
	## store self and arguments into the reserved VR0..VR1
	VR0	<-	VI0
	VR1	<-	VI1
	## begin dispatch - line 16
	VR2	<-	VR0
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid3
	jumpt	VR2 dispatch_notvoid3
	VR3	<-	str_const0
	VR4	<-	16
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid3:
	## actual parameter 1
	VR3	<-	str_const2
	## prepare self and actual parameters
	## compute the target address
	VR4	<-	Base_dispatch
	load	VR4 [VR4, 12]
	( VR2 )	<-	call VR4 ( VR2 VR3 )
	## begin dispatch - line 17
	VR2	<-	VR0
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid4
	jumpt	VR2 dispatch_notvoid4
	VR3	<-	str_const0
	VR4	<-	17
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid4:
	## actual parameter 1
	VR3	<-	VR1
	## prepare self and actual parameters
	## compute the target address
	VR4	<-	Base_dispatch
	load	VR4 [VR4, 12]
	( VR2 )	<-	call VR4 ( VR2 VR3 )
	## begin dispatch - line 18
	VR2	<-	VR0
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid5
	jumpt	VR2 dispatch_notvoid5
	VR3	<-	str_const0
	VR4	<-	18
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid5:
	## actual parameter 1
	VR3	<-	str_const1
	## prepare self and actual parameters
	## compute the target address
	VR4	<-	Base_dispatch
	load	VR4 [VR4, 12]
	( VR2 )	<-	call VR4 ( VR2 VR3 )
	return	VR2
.end

.function "Main.main", 1, 1
Main.main:
	## store self and arguments into the reserved VR0..VR0
	VR0	<-	VI0
	## begin let - line 29
	## begin new - line 29
	VR1	<-	Base_protObj
	( VR1 )	<-	call Object.copy ( VR1 )
	call Base_init ( VR1 )
	## let var me in VR1
	## begin dispatch - line 30
	VR2	<-	VR1
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid6
	jumpt	VR2 dispatch_notvoid6
	VR3	<-	str_const0
	VR4	<-	30
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid6:
	## prepare self and actual parameters
	## compute the target address
	VR3	<-	Base_dispatch
	load	VR3 [VR3, 28]
	( VR2 )	<-	call VR3 ( VR2 )
	## store let result over let var me
	VR1	<-	VR2
	## begin let - line 32
	## begin new - line 32
	VR1	<-	Derived_protObj
	( VR1 )	<-	call Object.copy ( VR1 )
	call Derived_init ( VR1 )
	## let var me in VR1
	## begin dispatch - line 33
	VR2	<-	VR1
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid7
	jumpt	VR2 dispatch_notvoid7
	VR3	<-	str_const0
	VR4	<-	33
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid7:
	## prepare self and actual parameters
	## compute the target address
	VR3	<-	Base_dispatch
	load	VR3 [VR3, 28]
	( VR2 )	<-	call VR3 ( VR2 )
	## store let result over let var me
	VR1	<-	VR2
	## begin let - line 35
	## begin new - line 35
	VR1	<-	Derived_protObj
	( VR1 )	<-	call Object.copy ( VR1 )
	call Derived_init ( VR1 )
	## let var me in VR1
	## begin dispatch - line 37
	VR2	<-	VR1
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid8
	jumpt	VR2 dispatch_notvoid8
	VR3	<-	str_const0
	VR4	<-	37
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid8:
	## prepare self and actual parameters
	## compute the target address
	VR3	<-	Base_dispatch
	load	VR3 [VR3, 28]
	( VR2 )	<-	call VR3 ( VR2 )
	## begin dispatch - line 38
	VR2	<-	VR1
	## caller in VR2
	## dispatch to void handling, ends at dispatch_notvoid9
	jumpt	VR2 dispatch_notvoid9
	VR3	<-	str_const0
	VR4	<-	38
	call void_disp_handler ( VR3 VR4 )
dispatch_notvoid9:
	## prepare self and actual parameters
	## compute the target address
	VR3	<-	Derived_dispatch
	load	VR3 [VR3, 28]
	( VR2 )	<-	call VR3 ( VR2 )
	## store let result over let var me
	VR1	<-	VR2
	return	VR1
.end

#### data section
	.data
#### constants
str_const15:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const0
	DS	4
str_const14:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const1
	DB	"Main"
	DS	4
str_const13:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const2
	DB	"Derived"
	DS	1
str_const12:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const1
	DB	"Base"
	DS	4
str_const11:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const3
	DB	"IO"
	DS	2
str_const10:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const4
	DB	"String"
	DS	2
str_const9:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const1
	DB	"Bool"
	DS	4
str_const8:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const5
	DB	"Int"
	DS	1
str_const7:
	DW	3
	DW	6
	DL	String_dispatch
	DL	int_const4
	DB	"Object"
	DS	2
str_const6:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const6
	DB	"_prim_slot"
	DS	2
str_const5:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const7
	DB	"SELF_TYPE"
	DS	3
str_const4:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const7
	DB	"_no_class"
	DS	3
str_const3:
	DW	3
	DW	8
	DL	String_dispatch
	DL	int_const8
	DB	"<basic class>"
	DS	3
str_const2:
	DW	3
	DW	7
	DL	String_dispatch
	DL	int_const9
	DB	"derived "
	DS	4
str_const1:
	DW	3
	DW	5
	DL	String_dispatch
	DL	int_const10
	DB	"\n"
	DS	3
str_const0:
	DW	3
	DW	11
	DL	String_dispatch
	DL	int_const11
	DB	"simple/override-basic.cl"
	DS	4
int_const11:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	24
int_const10:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	1
int_const9:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	8
int_const8:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	13
int_const7:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	9
int_const6:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	10
int_const5:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	3
int_const4:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	6
int_const3:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	2
int_const2:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	7
int_const1:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	4
int_const0:
	DW	1
	DW	4
	DL	Object_dispatch
	DW	0
bool_const1:
	DW	2
	DW	4
	DL	Object_dispatch
	DW	1
bool_const0:
	DW	2
	DW	4
	DL	Object_dispatch
	DW	0
#### class names by tag
class_nameTab:
	DL	str_const7
	DL	str_const8
	DL	str_const9
	DL	str_const10
	DL	str_const11
	DL	str_const12
	DL	str_const13
	DL	str_const14
#### prototypes and init by tag
class_objTab:
	DL	Object_protObj
	DL	Object_init
	DL	Int_protObj
	DL	Int_init
	DL	Bool_protObj
	DL	Bool_init
	DL	String_protObj
	DL	String_init
	DL	IO_protObj
	DL	IO_init
	DL	Base_protObj
	DL	Base_init
	DL	Derived_protObj
	DL	Derived_init
	DL	Main_protObj
	DL	Main_init
#### dispatch tables
Base_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	IO.out_string
	DL	IO.out_int
	DL	IO.in_string
	DL	IO.in_int
	DL	Base.identify
Derived_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	Derived.out_string
	DL	IO.out_int
	DL	IO.in_string
	DL	IO.in_int
	DL	Base.identify
Main_dispatch:
	DL	Object.abort
	DL	Object.copy
	DL	Object.type_name
	DL	Main.main
#### prototype objects
Base_protObj:
	DW	5
	DW	3
	DL	Base_dispatch
Derived_protObj:
	DW	6
	DW	3
	DL	Derived_dispatch
Main_protObj:
	DW	7
	DW	3
	DL	Main_dispatch
