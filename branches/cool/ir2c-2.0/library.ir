# CoolIR Runtime library

# Predefined functions - these are intrinsics implemented in the simulator
##########################################################################
.code

# The COOL runtime
#########################
# Startup code
.function "_start", 0, 0
_start:
	VR0 <- Main_protObj
	(VR0) <- call Object.copy (VR0)

	call Main_init (VR0)

	(VR2) <- call Main.main (VR0)

	VR0 <- __str_term_msg
	VR1 <- 35
	call __outString__ (VR0 VR1)
	
	call __abort__ (VR2)
.end

#########################
.function "Object.copy", 1, 1
Object.copy:
    VR0 <- VI0
	load VR1 [VR0, 4] # Object size
	VR5 <- VR1 * 4    # VR1 = size in words; VR5 = size in bytes

	(VR2) <- call __alloc__ (VR5) # Allocate memory

	VR3 <- VR2       # Copy data from VR0 to VR2, VR3 = ptr
__loc1:
    VR4 <- 0 < VR1
	jumpf VR4 __loc2
	load VR4 [VR0, 0]
	store VR4 [VR3, 0]
	VR1 <- VR1 - 1
	VR0 <- VR0 + 4
	VR3 <- VR3 + 4
	jump __loc1
	
__loc2:
	return VR2
.end

######################
.function "Object.abort", 1, 0
Object.abort:
	VR5 <- VI0
	VR0 <- __str_abort_msg
	VR1 <- 24
	call __outString__ (VR0 VR1)

	load VR0 [VR5, 0]
	VR0 <- VR0 * 4
	VR1 <- class_nameTab
	VR1 <- VR0 + VR1
	load VR1 [VR1, 0]
	VR2 <- 0
	call IO.out_string (VR2 VR1)

	VR0 <- __str_nl_msg
	VR1 <- 1
	call __outString__ (VR0 VR1)

	VR0 <- 0
	call __abort__ (VR0)
.end

######################
.function "Object.type_name", 1, 1
Object.type_name:
	VR0 <- VI0	
	load VR0 [VR0, 0]
	VR0 <- VR0 * 4
	VR1 <- class_nameTab
	VR1 <- VR0 + VR1
	load VR1 [VR1, 0]
	return VR1
.end
	
######################
.function "String.length", 1, 1
String.length:
	VR0 <- VI0
	load VR0 [VR0, 12]
	return VR0
.end

######################
# Helper: allocate a string of given size
# Input: param size
# Output: param the new string
.function "__allocString", 1, 1
__allocString:
	VR0 <- VI0
	VR10 <- VR0 + 4      	# Size in words including padding
	VR10 <- VR10 / 4
	VR10 <- VR10 + 4    	# Add header
	VR11 <- VR10 * 4    	# Size in bytes
	(VR1) <- call __alloc__ (VR11)

	VR2 <- 3              	# Type id
	store VR2 [VR1,0]
	store VR10 [VR1,4]		# Object size
	VR2 <- String_dispatch  # Dispatch
	store VR2 [VR1,8]		
	
	VR2 <- Int_protObj      # Actual size in bytes - box an integer
	(VR2) <- call Object.copy (VR2)
	store VR0 [VR2,12]
	store VR2 [VR1,12]
	
	VR20 <- VR0 + 16   		# Add padding - skip header and string size
	VR20 <- VR20 + VR1
	VR21 <- VR1 + VR11  	# How much padding is required
	VR2 <- 0				# Fill with zeroes
__la1:
	store VR2 [VR20,0]
	VR20 <- VR20 + 1
	VR3 <- VR20 = VR21
	jumpf VR3 __la1
		
	return VR1
.end

# Helper: copy memory bytes, non-overlapping
# Input: param size
#        param from
#        param to
.function "__copyBytes", 3, 0
__copyBytes:
	VR0 <- VI0
	VR1 <- VI1
	VR2 <- VI2
	
__cb0:
	VR3 <- 0 < VR0
	jumpf VR3 __cb1
	
	loadb VR3 [VR1,0]
	storeb VR3 [VR2,0] 
	
	VR0 <- VR0 - 1
	VR1 <- VR1 + 1
	VR2 <- VR2 + 1
	jump __cb0
	
__cb1:
	return
.end

###############
.function "String.concat", 2, 1
String.concat:
    VR0 <- VI0
    VR1 <- VI1

	load VR2 [VR0, 12]    # size of the 1st string
	load VR3 [VR2, 12]
	load VR2 [VR1, 12]    # size of the 2nd string
	load VR4 [VR2, 12]
	VR5 <- VR3 + VR4
	
	# allocate new string
	(VR10) <- call __allocString (VR5)
	
	# copy 1st string
	VR6 <- VR0 + 16
	VR7 <- VR10 + 16
	call __copyBytes (VR3 VR6 VR7)

	# copy 2nd string
	VR6 <- VR1 + 16
	VR7 <- VR7 + VR3
	call __copyBytes (VR4 VR6 VR7)
	
	return VR10
.end
	
######################
.function "String.substr", 3, 1
String.substr:
	VR0 <- VI0
	VR1 <- VI1
	VR2 <- VI2
	
	load VR1 [VR1,12]  		# Unbox the start position
	load VR2 [VR2,12]   	# Unbox the length

	VR10 <- VR1 < 0 		# Is the start position positive?
	jumpf VR10 __ss3
	VR1 <- 0
__ss3:

	VR10 <- VR2 < 0 		# Is the length positive?
	jumpf VR10 __ss4
	VR2 <- 0
__ss4:
	
	load VR3 [VR0, 12]		# Compute maximum length
	load VR3 [VR3, 12]
	
	VR10 <- VR1 < VR3 			# Is the start position inside the string?
	jumpt VR10 __ss1
	VR2 <- 0				# if not, return an empty string
__ss1:

	VR4 <- VR1 + VR2      	# Does the end position go past the end of the string?
	VR10 <- VR4 <= VR3
	jumpt VR10 __ss2
	VR2 <- VR3 - VR1   		# If yes, return the remaining string
__ss2:

	# allocate new string
	(VR5) <- call __allocString (VR2)

	# copy substring
	VR6 <- VR0 + 16			# from self + header + start
	VR6 <- VR6 + VR1
	VR7 <- VR5 + 16			# to new string + header
	call __copyBytes (VR2 VR6 VR7)

	return VR5
.end
	
######################
.function "IO.out_int", 2, 1
IO.out_int:
    VR1 <- VI0
    VR0 <- VI1
	load VR0 [VR0,12]
	call __outInt__ (VR0)

	return VR1
.end

######################	
.function "IO.out_string", 2, 1
IO.out_string:
    VR1 <- VI0
	VR10 <- VI1
	load VR11 [VR10, 12]
	load VR12 [VR11, 12]
	VR10 <- VR10 + 16
	call __outString__ (VR10 VR12)

	return VR1
.end

######################
.function "IO.in_int", 0, 1
IO.in_int:
	(VR0) <- call __inInt__			# Read a value

	VR2 <- Int_protObj      # Box it
	(VR2) <- call Object.copy (VR2)
	store VR0 [VR2,12]

	return VR2				# Return the boxed object
.end

######################
.function "IO.in_string", 0, 1
IO.in_string:
	(VR0 VR1) <- call __inString__		# Read the plain data from standard input

	# allocate a new string to hold that data
	(VR2) <- call __allocString (VR1)

	# copy the data into the object
	VR3 <- VR2 + 16
	call __copyBytes (VR1 VR0 VR3)

	return VR2
.end
	
######################
.function "equality_test", 4, 1
equality_test:
	VR0 <- VI0			# 1
	VR1 <- VI1     		# 2
	VR2 <- VI2			# Object 1
	VR3 <- VI3     		# Object 2
	
	load VR4 [VR2,0]	# typeof (object 1)
	load VR5 [VR3,0]	# typeof (object 2)
	VR10 <- VR4 = VR5
	jumpf VR10 __et0
	
	VR10 <- VR4 = 3		# String?
	jumpt VR10 __et2

	VR10 <- VR4 = 1		# Int or Bool?
	jumpt VR10 __et3
	VR10 <- VR4 = 2		# if not, basic type compare failed
	jumpf VR10 __et0

__et3:					# compare numeric values
	load VR4 [VR2,12]
	load VR5 [VR3,12]
	VR10 <- VR4 = VR5
	jumpt VR10 __et1
	jump __et0
	
__et2:					# compare string lengths
	load VR4 [VR2,12]
	load VR4 [VR4,12]
	load VR5 [VR3,12]
	load VR5 [VR5,12]
	VR10 <- VR4 = VR5
	jumpf VR10 __et0	# if different, strings are different
	
	VR2 <- VR2 + 16     # compare actual string content
	VR3 <- VR3 + 16
__et4:
	VR10 <- 0 < VR4
	jumpf VR10 __et1			# reached the end of the strings, no differences
	
	loadb VR6 [VR2,0]
	loadb VR7 [VR3,0]
	VR10 <- VR6 = VR7
	jumpf VR10 __et0			# fail, if a difference is found
	
	VR4 <- VR4 - 1
	VR2 <- VR2 + 1
	VR3 <- VR3 + 1
	jump __et4
	
__et1:
	return VR0			# compare ok

__et0:
	return VR1			# compare failed
.end
	
######################
.function "_dispatch_abort", 2, 0
_dispatch_abort:
	VR0 <- VI0			# File name
	VR1 <- VI1     		# Line number 
	VR2 <- 0
	
	# Print file name
	call IO.out_string (VR2 VR0)

	VR10 <- __str_colon_msg	# Print ':'
	VR11 <- 1
	call __outString__ (VR10 VR11)
	
	# Print line number
	call IO.out_int (VR2 VR1)

	VR10 <- __str_dispatch_msg	# Print error message
	VR11 <- 20
	call __outString__ (VR10 VR11)

	VR0 <- 0
	call __abort__ (VR0)
.end
		
######################
.function "_case_abort", 1, 0
_case_abort:
	VR0 <- VI0			# Self
	VR2 <- 0
	
	VR10 <- __str_cabort_msg	# Print error message
	VR11 <- 37
	call __outString__ (VR10 VR11)

	load VR1 [VR0,8]			# Call self.type_name()
	load VR1 [VR1,8]
	(VR1) <- call VR1 (VR0)

	# Print the resulting name
	call IO.out_string (VR2 VR1)

	VR10 <- __str_nl_msg	# Print EOL
	VR11 <- 1
	call __outString__ (VR10 VR11)

	VR0 <- 0
	call __abort__ (VR0)
.end

######################
.function "_case_abort2", 2, 0
_case_abort2:
	VR0 <- VI0			# File name
	VR1 <- VI1     		# Line number 
	VR2 <- 0
	
	# Print file name
	call IO.out_string (VR2 VR0)

	VR10 <- __str_colon_msg	# Print ':'
	VR11 <- 1
	call __outString__ (VR10 VR11)
	
	# Print line number
	call IO.out_int (VR2 VR1)

	VR10 <- __str_cabort_msg2	# Print error message
	VR11 <- 33
	call __outString__ (VR10 VR11)
	VR0 <- 0
	call __abort__ (VR0)
.end

######################
.data

#Error messages
__str_term_msg:
	DB "COOL program successfully executed\n"	# 35 chars
	DB 0

__str_abort_msg:
	DB "Abort called from class "				# 24 chars
	DB 0
	DS 3

__str_colon_msg:								# 1 char
	DB ":"
	DB 0
	DS 2

__str_nl_msg:								# 1 char
	DB "\n"
	DB 0
	DS 2
	
__str_dispatch_msg:
	DB ": Dispatch to void.\n"					# 20 chars
	DB 0
	DS 3
		
__str_cabort_msg:
	DB "No match in case statement for Class "	# 37 chars
	DB 0
	DS 2
	
__str_cabort_msg2:
	DB "Match on void in case statement.\n"		# 33
	DB 0
	DS 2
